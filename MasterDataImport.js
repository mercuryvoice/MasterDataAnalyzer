// @ts-check

// =================================================================================================
// =================================== VERSION & FEATURE SUMMARY ===================================
// =================================================================================================
//
// V1.0 (Pre-release version):
// - Noted.
//
// =================================================================================================

/**
 * MasterDataAnalyzer - A Google Sheets Add-on for intelligent data operations.
 *
 * Copyright (c) 2025 Tata Sum (mda.design)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */


// =================================================================================================
// ===================================== SECTION 1: USER INTERFACE & TRANSLATIONS ==================
// =================================================================================================

const TRANSLATIONS = {
    en: {
        // --- Main Menu ---
        mainMenuTitle: 'MasterDataAnalyzer',
        // --- Sub Menus ---
        importMenuTitle: 'Data Import Tool',
        validationMenuTitle: 'Data Validation Tool',
        manageMenuTitle: 'Data Management Tool',
        guideMenuTitle: 'Guides & Examples',
        // --- Items ---
        settingsItem: '‚öôÔ∏è Open Settings',
        manageSettingsItem: '‚öôÔ∏è Monitoring Management Settings',
        quickDeleteItem: 'üóëÔ∏è Quick Delete Sheets',
        reportSettingsItem: 'üìä Report Generation Settings',
        runImportItem: '‚ñ∂Ô∏è Run Import (Sync)',
        stopImportItem: '‚èπÔ∏è Stop Import',
        resetImportItem: 'üîÑ Clear Import Data & Progress',
        runCompareItem: '‚ñ∂Ô∏è Run Data Comparison',
        compareSettingsItem: '‚öôÔ∏è Data Comparison Settings',
        verifySettingsItem: '‚öôÔ∏è Data Validation Settings',
        runMsModeItem: '‚ñ∂Ô∏è Run Validation (MS Mode)',
        stopValidationItem: '‚èπÔ∏è Stop Validation',
        verifySumsItem: 'üîç Verify Sums & Cumulative Values',
        cleanupItem: 'üîÑ Clear Validation Data & Progress',
        monitorMenuName: 'Data Change Monitoring',
        enableNotifyItem: 'üü¢ Enable Automatic Notifications',
        disableNotifyItem: 'üî¥ Disable Automatic Notifications',
        checkNowItem: '‚úâÔ∏è Check and Notify Now',
        privacyPolicyItem: 'Privacy Policy',
        // --- Guide Sub-menu Items (Placeholders) ---
        manufacturingGuide: 'Manufacturing Example',
        manufacturingProductionTitle: 'Manufacturing Production',
        businessGuide: 'Business & Sales Example',
        // hrGuide: 'Human Resources Example',
        startBusinessGuide: '‚ñ∂Ô∏è Start Interactive Guide (Sales)',
        startManufacturingGuide: '‚ñ∂Ô∏è Start Interactive Guide (Manufacturing)',
        // --- HTML UI Titles ---
        importSettingsTitle: 'Data Import Settings',
        compareSettingsTitle: 'Data Comparison Settings',
        verifySettingsTitle: 'Data Validation Settings',
        manageSettingsTitle: 'Data Monitoring Management Settings',
        quickDeleteTitle: 'Quick Delete Sheets',
        reportSettingsTitle: 'Report Generation Settings',
        sheetSelectionTitle: 'Select a Sheet',
        privacyPolicyTitle: 'Privacy Policy',
         // Privacy Policy Content
        privacyLastUpdated: 'Last Updated: September 2, 2025',
        privacyIntro: "Thank you for using MasterDataAnalyzer (hereinafter referred to as 'this add-on'). We are committed to protecting your privacy and ensuring you understand how your data is handled. All operations of this add-on are completed within your Google account. We do not collect, store, or share your personal information or document content with any third parties.",
        privacyDataCollectionTitle: 'Data Collection and Use',
        privacyDataCollectionP1: "This add-on is a tool built on Google Apps Script, designed to help you process data within Google Sheets.",
        privacyDataCollectionL1: '**No Personal Information Collected**: We do not ask for, collect, or store any personally identifiable information, such as your name, email address, or contact details.',
        privacyDataCollectionL2: '**Data Processing**: All data reading, processing, and writing operations occur directly within the Google Sheets, Google Docs, or Google Drive files you authorize. Data is not transmitted to our servers or any external services.',
        privacyDataCollectionL3: "**Settings Storage**: The settings you configure for this add-on (e.g., data sources, field mappings) are stored using Google Apps Script's built-in `PropertiesService` as properties linked to your Google document. These settings are only accessible to the add-on for its operation within your account; we cannot access them externally.",
        privacySecurityTitle: 'Security Statement and Permissions Explanation',
        privacySecurityP1: 'To provide its full functionality, this add-on will request your authorization for the following Google services upon installation. These permissions are used exclusively for the specific functions described and will never be used for any other purpose.',
        privacySecurityP2: 'The following is a detailed explanation based on the `oauthScopes` in your `appsscript.json` file:',
        privacyScopeSpreadsheetsTitle: '`https://www.googleapis.com/auth/spreadsheets`',
        privacyScopeSpreadsheetsPermission: 'Permission: View, edit, create, and delete your Google Sheets spreadsheets.',
        privacyScopeSpreadsheetsPurpose: "Purpose: This is the core permission for the add-on. We need this to:",
        privacyScopeSpreadsheetsUse1: 'Read data from your specified source spreadsheets.',
        privacyScopeSpreadsheetsUse2: 'Write processed data into your target spreadsheets.',
        privacyScopeSpreadsheetsUse3: 'Create new sheets for reports, sample data, etc.',
        privacyScopeSpreadsheetsUse4: 'Execute the "Quick Delete Sheets" feature.',
        privacyScopeDocumentsTitle: '`https://www.googleapis.com/auth/documents`',
        privacyScopeDocumentsPermission: 'Permission: View, edit, create, and delete your Google Docs documents.',
        privacyScopeDocumentsPurpose: 'Purpose: This permission is used solely for the "Export Report" feature. When you choose to export analysis results to a Google Doc, the add-on creates a new document and writes the report content into it.',
        privacyScopeDriveTitle: '`https://www.googleapis.com/auth/drive`',
        privacyScopeDrivePermission: 'Permission: View, edit, create, and delete specific files in your Google Drive.',
        privacyScopeDrivePurpose: 'Purpose: This permission primarily supports the "Export Report" feature:',
        privacyScopeDriveUse1: 'When exporting to Google Docs, this permission is needed to create the document in your Drive.',
        privacyScopeDriveUse2: 'When exporting as a PDF, the add-on first creates a Google Doc, converts it to a PDF file saved in your Drive, and may delete the temporary document.',
        privacyScopeGmailTitle: '`https://www.googleapis.com/auth/gmail.send`',
        privacyScopeGmailPermission: 'Permission: Allow this add-on to send email on your behalf. **(Note: This add-on cannot read any of your emails)**',
        privacyScopeGmailPurpose: 'Purpose: This permission is used only for the "Data Change Monitoring" feature. When a change occurs in a cell range you have configured for monitoring, the add-on will automatically send a notification email to the address you have specified.',
        privacyScopeUITitle: '`https://www.googleapis.com/auth/script.container.ui`',
        privacyScopeUIPermission: 'Permission: Display user interfaces in Google Sheets.',
        privacyScopeUIPurpose: 'Purpose: This permission is required for the add-on to display all user interfaces, such as settings windows, sidebars, dialog boxes, and custom menus within your spreadsheet.',
        privacyScopeScriptAppTitle: '`https://www.googleapis.com/auth/script.scriptapp`',
        privacyScopeScriptAppPermission: 'Permission: Allow Apps Script to create and manage script triggers.',
        privacyScopeScriptAppPurpose: 'Purpose: This permission is used to create an `onOpen` trigger to automatically generate the "MasterDataAnalyzer" menu when you open a spreadsheet. It is also used by the "Data Change Monitoring" feature to create triggers that detect worksheet changes.',
        privacyScopeExternalRequestTitle: '`https://www.googleapis.com/auth/script.external_request`',
        privacyScopeExternalRequestPermission: 'Permission: Allow Apps Script to connect to external services.',
        privacyScopeExternalRequestPurpose: 'Purpose: In the current version, this add-on **does not** actively send requests or transmit your data to any non-Google external servers. This permission is included to allow for potential future feature enhancements (e.g., connecting to public API services) but is not currently in use.',
        privacyScopeStorageTitle: '`https://www.googleapis.com/auth/script.storage`',
        privacyScopeStoragePermission: 'Permission: Allow Apps Script to store a small amount of data.',
        privacyScopeStoragePurpose: 'Purpose: As described in "Settings Storage" above, we use this permission to save your configurations for various features, so you do not need to re-enter them each time you use the add-on.',
        privacyChangesTitle: 'Policy Changes',
        privacyChangesP1: 'We may update this Privacy Policy from time to time. Any changes will be posted on this page, and we encourage you to review it periodically.',
        privacyContactTitle: 'Contact Us',
        privacyContactP1: 'If you have any questions about this Privacy Policy, please contact us at [tsengmercury@gmail.com].',
        // --- NEW: Dashboard Generator UI ---
        sectionFieldMapping: 'Field Mapping',
        regionColumnLabel: 'Region Field',
        productColumnLabel: 'Product/Item Field',
        salesColumnLabel: 'Sales Value Field',
        generateReportButton: 'Generate Report',
        step1Title: 'Step 1: Prepare Raw Data',
        step1Description: 'This is a typical sales ledger, containing information such as date, region, product, and sales amount.',
        // sourceSpreadsheetUrlLabel: 'Source Spreadsheet URL',
        sourceDataSheetNameLabel: 'Source Data Sheet Name',
        sourceDataRangeLabel: 'Data Range (including header)',
        sourceDataRangePlaceholder: 'e.g., A1:G100',
        generateDashboardButton: 'Generate Dashboard with One Click',
        generatingDashboard: 'Generating Dashboard...',
        step2Title: 'Step 2: View Generated Results',
        overviewTab: 'Overview',
        productAnalysisTab: 'Product Analysis',
        regionAnalysisTab: 'Region Analysis',
        rawDataTab: 'Raw Data',
        salesOverviewTitle: 'Sales Overview',
        totalSalesLabel: 'Total Sales',
        totalOrdersLabel: 'Total Orders',
        regionSalesDistributionTitle: 'Sales Distribution by Region',
        productSalesAnalysisTitle: 'Sales Analysis by Product',
        totalSalesAxisTitle: 'Total Sales',
        productAxisTitle: 'Product',
        regionSalesAnalysisTitle: 'Sales Analysis by Region',
        regionAxisTitle: 'Region',
        errorTitle: 'Error',
        requiredFieldsError: 'The selected range must contain the following headers: {HEADERS}. Please check your data range.',
        // Tutorial Steps
        businessGuideTutorialTitle: 'Business & Sales Example - Tutorial',
        manufacturingGuideTutorialTitle: 'Manufacturing Example - Tutorial',
        // Business Tutorial
        businessWelcomeTitle: "Welcome! (Business & Sales)",
        businessWelcomeInstruction: "Welcome to the interactive tutorial for the 'Business & Sales Example'.\n\nOur goal is to transform an incomplete sales record into a complete analysis report using the features of MasterDataAnalyzer.\n\nClick 'Next' to start our first task!",
        businessTask1Step1Title: "Task 1: Data Import (1/6)",
        businessTask1Step1Instruction: "First, please ensure you have activated the <code>{SHEET_NAME}</code> sheet.\n\nOur goal is to filter and import sales records from <code>{SOURCE_SHEET_NAME}</code> into the current dashboard.",
        businessTask1Step2Title: "Task 1: Data Import (2/6)",
        businessTask1Step2Instruction: "Please click on <code>MasterDataAnalyzer > Data Import Tool > ‚öôÔ∏è Data Import Settings</code> in the top menu.",
        businessTask1Step3Title: "Task 1: Data Import (3/6)",
        businessTask1Step3Instruction: "In the settings window, please configure the following:\n1. **Source Spreadsheet URL**: (Paste the URL of the current file)\n2. **Source Data Sheet Name**: Select <code>{SOURCE_SHEET_NAME}</code>\n3. **Target Data Sheet Name**: Should be auto-filled with <code>{TARGET_SHEET_NAME}</code>",
        businessTask1Step4Title: "Task 1: Data Import (4/6)",
        businessTask1Step4Instruction: "Next, set the data ranges:\n1. **Header Start Row for Data Import**: <code>1</code>\n2. **Data Import Start Row**: <code>2</code>\n3. **Source Data Import Range**: <code>A2:E9</code>",
        businessTask1Step5Title: "Task 1: Data Import (5/6)",
        businessTask1Step5Instruction: "Suppose we only want to analyze sales for the \"{PRODUCT_NAME}\". Please add a filter condition:\n1. **Header Name**: <code>{HEADER_NAME}</code>\n2. **Keywords**: <code>{PRODUCT_NAME}</code>",
        businessTask1Step6Title: "Task 1: Data Import (6/6)",
        businessTask1Step6Instruction: "Great! All settings are complete.\n\nPlease click 'Save Settings', close the window, and then run <code>MasterDataAnalyzer > Data Import Tool > ‚ñ∂Ô∏è Run Import</code> from the menu.",
        businessCheckpointTitle: "Task 1 Complete!",
        businessCheckpointInstruction: "Congratulations! You have successfully imported the raw data into the dashboard.\n\nWould you like to continue learning about the next core feature, 'Data Comparison'?",
        businessTask2Step1Title: "Task 2: Enrich Customer Data (1/3)",
        businessTask2Step1Instruction: "Excellent! The dashboard now has raw data but lacks detailed customer information.\n\nNext, we'll use the 'Data Comparison' feature to look up and fill in customer data from the \"[Source] Customer Master\".\n\nOpen <code>Data Import Tool > ‚öôÔ∏è Data Comparison Settings</code> and begin configuring Task 2:",
        businessTask2Step2Title: "Task 2: Enrich Customer Data (2/3)",
        businessTask2Step2Instruction: "Please apply the following settings:\n1. **Source Sheets**: Choose \"Source Data Sheet Name\" as <code>{SOURCE_SHEET_NAME}</code> and \"Target Data Sheet Name\" as <code>{TARGET_SHEET_NAME}</code>.\n2. **Ranges**: Set \"Target Data Start Row\" to <code>2</code> and \"Source Data Compare Range\" to <code>A2:D6</code>.\n3. **Field Mapping**: Set up the fields in the following order:\n¬† - **Target Lookup Column**: <code>B</code> (Customer ID)\n¬† - **Source Compare Column**: <code>A</code> (Customer ID)\n¬† - **Source Return Column**: <code>B</code> (Customer Name)\n¬† - **Target Write Column**: <code>C</code> (Customer Name)",
        businessTask2Step3Title: "Task 2: Enrich Customer Data (3/3)",
        businessTask2Step3Instruction: "After saving the settings, run <code>MasterDataAnalyzer > Data Import Tool > ‚ñ∂Ô∏è Run Data Comparison</code>.\n\nYou will see the customer names have been successfully imported. Repeat this process to also fill in the \"Region\" and \"Salesperson\" to complete the dashboard.",
        businessTask3Step1Title: "Task 3: Compare Sales Targets (1/2)",
        businessTask3Step1Instruction: "The dashboard data is becoming more complete! For the final step, let's compare the sales targets for each product.\n\nPlease open the 'Data Comparison Settings' again.",
        businessTask3Step2Title: "Task 3: Compare Sales Targets (2/2)",
        businessTask3Step2Instruction: "This time, use \"Product Name\" as the lookup key and select \"[Source] Product Targets\" as the source sheet.<br>Set the \"Source Data Compare Range\" to <code>A2:B5</code>, and configure the field mapping as follows:<br>¬† - **Target Lookup Column**: <code>F</code> (Product Name)<br>¬† - **Source Compare Column**: <code>A</code> (Product Name)<br>¬† - **Source Return Column**: <code>B</code> (Monthly Target)<br>¬† - **Target Write Column**: <code>J</code> (Monthly Target)<br><br>Then, run the 'Data Comparison' again.",
        businessFinalStepTitle: "Congratulations, Analysis Complete!",
        businessFinalStepInstruction: "All data is now in place! You now have a clean, complete dataset ready for analysis.\n\nNext, you can manually enter or click the button below to insert formulas in the corresponding columns to complete the final calculations:\n- **Total Sales**: <code>=H2*I2</code> (Quantity * Unit Price)\n- **Achievement Rate**: <code>=G2/J2</code> (Total Sales / Monthly Target)",
        // Manufacturing Tutorial
        mfgWelcomeTitle: "Welcome! (Manufacturing)",
        mfgWelcomeInstruction: "Welcome to the interactive tutorial for the 'Manufacturing Example'.\n\nThis guide will walk you through using MasterDataAnalyzer's 'Data Import (Array Mode)' and 'Data Validation' features to convert a complex bill of materials into a standardized format and compare it against master data.",
        mfgTask1Step1Title: "Task 1: Data Import (1/6)",
        mfgTask1Step1Instruction: "First, please ensure you have activated the <code>{SHEET_NAME}</code> sheet.\n\nOur goal is to convert and import unstructured data from <code>{SOURCE_SHEET_NAME}</code> into the current target sheet.",
        mfgTask1Step2Title: "Task 1: Import Settings (2/6)",
        mfgTask1Step2Instruction: "Please click on <code>MasterDataAnalyzer > Data Import Tool > ‚öôÔ∏è Data Import Settings</code> in the top menu.",
        mfgTask1Step3Title: "Task 1: Import Settings (3/6)",
        mfgTask1Step3Instruction: "In the settings window, please configure the following:\n1. **Source Spreadsheet URL**: (Paste the URL of the current file)\n2. **Source Data Sheet Name**: Select <code>{SOURCE_SHEET_NAME}</code>\n3. **Target Data Sheet Name**: Should be auto-filled with <code>{TARGET_SHEET_NAME}</code>",
        mfgTask1Step4Title: "Task 1: Import Settings (4/6)",
        mfgTask1Step4Instruction: "Next is the key step, enabling 'Data Array Comparison' mode:\n1. **Header Start Row for Data Import**: <code>3</code>\n2. **Data Import Start Row**: <code>4</code>\n3. **Source Data Import Range**: <code>A9:E14</code>\n4. **Header Start Row for Other Blocks**: <code>F2:I2</code>\n5. **Data Range within Header of Other Blocks**: <code>F9:I14</code>",
        mfgTask1Step5Title: "Task 1: Filter Settings (5/6)",
        mfgTask1Step5Instruction: "In the Filter & Validation section, you can select which headers and keywords to import.\n1. In \"Source Header Import Range Settings\", enter <code>A8:E8</code>\n2. For \"Keyword Filter Conditions (AND)\", select <code>Owner</code>\n3. Click the \"Select\" box to the right of the keyword and choose <code>Mark</code>, <code>Linda</code>, and <code>Mary</code>.",
        mfgTask1Step6Title: "Task 1: Execute Import (6/6)",
        mfgTask1Step6Instruction: "Once the import settings are configured, don't forget to click \"Save Settings\". After saving, proceed to run <code>‚ñ∂Ô∏è Run Import</code>.\n\nYou should now see imported data in columns A - G, indicating that the data has been successfully filtered and imported.",
        mfgCheckpointTitle: "Task 1 Complete!",
        mfgCheckpointInstruction: "Congratulations! You have successfully transformed and imported the array data.\n\nNext, would you like to learn how to use the 'Data Validation' feature to compare the imported data with master data?",
        mfgTask2Step1Title: "Task 2: Validation Settings (1/4)",
        mfgTask2Step1Instruction: "Great! Now let's verify the accuracy of the imported data.\n\nPlease open <code>MasterDataAnalyzer > Data Validation Tool > ‚öôÔ∏è Data Validation Settings</code>.",
        mfgTask2Step2Title: "Task 2: Data Range Settings (2/4)",
        mfgTask2Step2Instruction: "In the [Data Validation] settings window, please configure the following:<br>1. **Source Spreadsheet URL**: (Paste the URL of the current file)<br>2. **Source Data Sheet Name**: Select <code>{SOURCE_SHEET_NAME}</code><br>3. Please fill in the data range settings in the following order:<br>¬† ¬†- Data Import Start Row after Validation: <code>4</code><br>¬† ¬†- Target Data Header Start Row: <code>3</code><br>¬† ¬†- Source Data Header Start Row: <code>1</code><br><br>Proceed to the next step to begin setting up the 'Field Validation Conditions' and 'Validation Result Outputs'.",
        mfgTask2Step3Title: "Task 2: Field Validation Settings (3/4)",
        mfgTask2Step3Instruction: "In the Field and Validation Conditions section, the first step is to map the 'Target Column' and 'Source Column'.<br>We recommend using the <b>Auto-map Validation Fields</b> feature first, which will <b>automatically match and recommend</b> suitable headers for you.<br>For this task, the validation conditions are as follows:<br>Target Column - Source Column<br><code>B</code> - <code>B</code><br><code>C</code> - <code>C</code><br><code>D</code> - <code>D</code><br><code>E</code> - <code>E</code><br><code>G</code> - <code>A</code>",
        mfgTask2Step4Title: "Task 2: Validation Output Settings (4/4)",
        mfgTask2Step4Instruction: "Next, configure the data columns to be returned from the source upon successful validation.<br>Similarly, you can use the <b>Auto-map Output Fields</b> feature to speed up the setup.<br>The output field conditions are as follows:<br>Target Column - Source Column<br><code>H</code> - <code>F</code><br><code>I</code> - <code>G</code><br><code>J</code> - <code>H</code><br><br>Finally, we will set the \"Mismatch Info Output Column\" to <code>K</code>, so the script can write error messages there.",
        mfgFinalStepTitle: "All Settings Are Ready!",
        mfgFinalStepInstruction: "Please remember to click [Save Settings], then start by running <code>Data Validation Tool > ‚ñ∂Ô∏è Run Validation (MS Mode)</code>!<br><br>After execution, please check column K in the <code>{SHEET_NAME}</code> sheet. You will see that the script has automatically flagged all mismatched items and their reasons.",
        sectionSourceAndTarget: 'Source & Target',
        sectionDataRanges: 'Data Ranges',
        sectionFilterAndValidate: 'Filter & Validation',
        sectionValidationConditions: 'Field Validation Conditions',
        sectionValidationOutputs: 'Validation Result Outputs',
        sectionMismatchOutput: 'Mismatch Information Output',
        sectionDataManagement: 'Data Management Settings',
        sectionRangesAndConditions: 'Data Ranges & Conditions',
        sectionFieldMapping: 'Field Mapping',
        closeButton: 'Close',
        saveButton: 'Save Settings',
        selectButton: 'Select',
        okButton: 'OK',
        defaultTemplateButton: 'Default Template',
        removeAllButton: 'Remove All Fields',
        checkButton: 'Check',
        pinWindowTooltip: 'Pin Window',
        unpinWindowTooltip: 'Unpin Window',
        expandWindowTooltip: 'Expand Window',
        collapseWindowTooltip: 'Collapse Window',
        dragAndActionHelp: 'Click the empty space in the title bar above to drag.\nUse the icons on the right to expand or pin.',
        // sourceSpreadsheetUrlLabel: 'Source Spreadsheet URL',
        sourceDataSheetNameLabel: 'Source Data Sheet Name',
        // Import Settings UI
        currentTargetSheetNameLabel: "Target Data Sheet Name",
        settingsForSheetHint: 'Current settings for sheet: {SHEET_NAME}',
        importHeaderStartRowLabel: 'Header Start Row for Data Import',
        importDataStartRowLabel: 'Data Import Start Row',
        sourceDataRangeLabel: 'Source Data Import Range',
        validationHeaderStartRowLabel: 'Header Start Row for Other Blocks',
        validationMatrixRangeLabel: 'Data Range within Header of Other Blocks',
        headerImportFilterLabel: 'Source Header Import Range Settings',
        keywordFiltersLabel: 'Keyword Filter Conditions (AND)',
        addFilterConditionLabel: '+ Add Filter Condition',
        headerPlaceholder: 'Header Name',
        keywordsPlaceholder: 'Keywords (comma-separated)',
        dataStartRowLabel: 'Start Row for Data Validation Import',
        verifySourceUrlLabel: 'Source Spreadsheet URL',
        verifySourceSheetNameLabel: 'Source Data Sheet Name',
        mismatchColumnLabel: 'Mismatch Info Output Column',
        targetHeaderRowLabel: 'Target Data Header Start Row',
        sourceHeaderRowLabel: 'Source Data Header Start Row',
        targetColumnLabel: 'Target Column',
        sourceColumnLabel: 'Source Column',
        primaryValidationLabel: 'Major Validation',
        selectAllLabel: 'Select/Deselect All',
        fieldMappingJSONLabel: 'Field Mapping & Validation Settings',
        checkEmptyValuesButton: 'Check Source for Empty Values',
        monitorRangeLabel: 'Automatic notification for document content changes',
        monitorEmailLabel: 'Notification Recipient Email',
        monitorSubjectLabel: 'Notification Subject',
        monitorBodyLabel: 'Notification Body',
        addValidationMappingButton: '+ Add Validation Field',
        autoMapValidationButton: 'Auto-map Validation Fields',
        addOutputMappingButton: '+ Add Output Field',
        autoMapOutputButton: 'Auto-map Output Fields',
        targetStartRowLabel: 'Target Data Start Row',
        targetStartRowHelp: 'Start reading target data and writing comparison results from this row number.',
        sourceCompareRangeLabel: 'Source Data Compare Range',
        sourceCompareRangeHelp: 'The range in the source sheet that includes the "Compare Column" and "Return Column".',
        targetLookupColLabel: 'Target Lookup Column',
        targetLookupColHelp: 'The column in the target sheet used to look up values.',
        targetWriteColLabel: 'Target Write Column',
        targetWriteColHelp: 'Write the comparison results to this column.',
        sourceLookupColLabel: 'Source Compare Column',
        sourceLookupColHelp: 'The column within the "Compare Range" to be compared against.',
        sourceReturnColLabel: 'Source Return Column',
        sourceReturnColHelp: 'The column within the "Compare Range" to return upon a match.',
        sourceUrlHelp: 'Paste the full URL of the source Google Sheet.',
        importHeaderStartRowHelp: "The row containing the classification names for your data columns is the header row.",
        importDataStartRowHelp: 'The row number where data import should begin in the target sheet.',
        sourceDataRangeHelp: "The row and column range of the data after the header.",
        validationHeaderStartRowHelp: "If filled, enables 'Data Array Comparison' mode. Compares import headers against this row to list statistical item data.",
        headerImportFilterHelp: 'Optional. Specify headers as a list (Header1,Header2) or a range (A1:D1). If blank, all columns from the "Source Data Import Range" will be used.',
        verifyStartRowHelp: "The data validation will start updating based on the set row number.",
        verifySourceUrlHelp: 'URL of the spreadsheet to use for data verification.',
        mismatchColumnHelp: 'Column letter (e.g., K) to output mismatch information.',
        targetHeaderRowHelp: 'The row number in the target sheet where the headers are located.',
        sourceHeaderRowHelp: 'The row number in the source sheet where the headers are located.',
        monitorRangeHelp: 'Specify the cell range (e.g., A2:E20) to monitor for changes.',
        monitorEmailHelp: 'Enter the email address to receive notifications.',
        monitorSubjectHelp: 'Set a custom subject for the notification email. Use {SHEET_NAME} as a placeholder.',
        monitorBodyHelp: 'Set a custom body. Use placeholders: {SHEET_NAME}, {RANGE}, {TIMESTAMP}, {CHANGES_COUNT}, {CHANGE_DETAILS}, {SHEET_URL}.',
        defaultSubjectTemplate: '[Change Notification] Sheet "{SHEET_NAME}" has been updated',
        defaultBodyTemplate: 'Hello,\n\nThe system has detected a change in the monitored sheet.\n\nSheet Name: {SHEET_NAME}\nMonitored Range: {RANGE}\nChange Time: {TIMESTAMP}\n\nChange Details ({CHANGES_COUNT} items):\n{CHANGE_DETAILS}\n\nPlease click the link below to view the latest content:\n{SHEET_URL}',
        savingMessage: 'Saving...',
        validatingMessage: 'Validating...',
        saveSuccess: 'Settings saved successfully!',
        saveFailure: 'Failed to save settings',
        autoMappingMessage: 'Auto-mapping...',
        autoMapSuccessBody: 'Found and created {COUNT} matching field(s). Please review and save.',
        autoMapNoMatchTitle: 'No Matches Found',
        autoMapNoMatchBody: 'Could not find any headers with matching names between the source and target sheets. Please check your settings.',
        checkingMessage: 'Checking...',
        checkSuccess: 'Validation passed. No empty or duplicate values found.',
        checkFailure: 'Field Check Notice:',
        importCancelled: 'Import cancelled by user.',
        settingsError: 'Settings Error',
        headerLessThanStartError: 'Header Start Row for Data Import must be less than Data Import Start Row.',
        preflightTitle: 'Settings Confirmation',
        preflightWarning: 'Warning:',
        preflightFilterWarning: '- A filter condition has a header but no keywords; it will be ignored.',
        preflightSuggestion: 'This might be unintended. It is recommended to review your settings.',
        preflightConfirmation: 'Are you sure you want to continue?',
        asymmetryWarningTitle: "Asymmetric Settings Warning",
        asymmetryWarningBody: "The columns in your 'Source Data Import Range' do not match the columns in your 'Source Header Import Filter'.\n\nThe script will prioritize the 'Source Header Import Filter' and only import the columns you specified there.\n\nRange Columns: {RANGE_HEADERS}\nFilter Columns: {FILTER_HEADERS}\n\nDo you want to continue?",
        filterMismatchTitle: "No Matching Data Found",
        filterMismatchBody: "Source data was found, but no rows matched your filter criteria.\n\nPlease check your 'Keyword Filter Conditions' and ensure they correctly correspond to the source data.\n\nThe target sheet will now be cleared.",
        preCheckWarningTitle: 'Comparison Field Warning',
        preCheckWarningBody: 'Before running the comparison, the following issues were found in the "Source Compare Field" ({COLUMN}):\n\n{MESSAGE}\n\nContinuing may lead to unexpected results. Are you sure you want to proceed?',
        preCheckWarningBodyTarget: 'Before running the comparison, the following issues were found in the "Target Lookup Field" ({COLUMN}):\n\n{MESSAGE}\n\nContinuing may lead to unexpected results. Are you sure you want to proceed?',
        preCheckCancelled: 'Comparison cancelled by user.',
        errorUrlRequired: 'Source Spreadsheet URL cannot be empty.',
        errorSheetNameRequired: 'Source Data Sheet Name cannot be empty.',
        errorTargetSheetRequired: "Current Spreadsheet's Sheet Name cannot be empty.",
        errorVerifyUrlRequired: 'Source Spreadsheet URL cannot be empty.',
        errorVerifySheetNameRequired: 'Source Data Sheet Name cannot be empty.',
        errorInvalidUrl: "Could not access the provided URL. Please check if it is correct and that you have access permissions.",
        errorInvalidHeaderRange: "Could not read headers from the specified range '{RANGE}'. Please check the range and source sheet.",
        errorInvalidHeaderRow: "Could not read headers from row {ROW_NUM}. Please check the row number and sheet name.",
        errorInvalidColumnFormat: "Invalid format. Please enter a valid column letter (e.g., A, B, AA).",
        errorInvalidColumnSave: "Cannot save. Please correct the invalid column letters (marked in red).",
        noSheetsFound: "No sheets were found in the spreadsheet. It might be empty or inaccessible.",
        emptyRowsFound: 'Empty values found in rows: {ROWS}.',
        duplicateValuesFound: 'Duplicate value found: \'{VALUE}\' is repeated in rows: {ROWS}',
        multipleDuplicateValuesFound: 'Duplicate values found: {DETAILS}',
        sourceCompareFieldCheckError: 'The specified Source Compare Field ({COLUMN}) is not within the Source Compare Range ({RANGE}).',
        targetLookupFieldCheckError: 'Could not find data in the specified Target Lookup Field ({COLUMN}). Please check the column letter and the Target Start Row.',
        unsavedWarningTitle: 'Warning',
        unsavedWarningBody: 'Unsaved settings will be lost when switching sheets. It is recommended to save your current settings first.',
        saveAndContinueButton: 'Save Current Settings',
        continueAnywayButton: 'Continue Anyway',
        duplicateHeaderWarning: "Duplicate headers found in source data: {HEADERS}. To ensure accuracy, please specify a unique header range in the 'Source Header Import Filter' field.",
        invalidHeaders: "The following headers were not found in the source sheet: {HEADERS}.",
        invalidKeywords: "The following keywords were not found under header '{HEADER}': {KEYWORDS}.",
        errorDialogTitle: 'Error',
        cleanupError: 'Error during cleanup: {MESSAGE}',
        sumVerificationError: 'Error during sum verification: {MESSAGE}',
        sheetNotFound: 'Sheet named "{SHEET_NAME}" not found.',
        requiredMismatch: "Required {FIELDS}_Mismatch",
        noDataTitle: "No Data to Process",
        noDataBody: "No data rows were found in the target sheet to validate.\n\nPlease ensure there is data below the configured \"Data Start Row\".",
        noProcessableRowsTitle: "No Processable Rows Found",
        noProcessableRowsBody: "No rows containing data in the primary key column(s) {KEY_NAME_DISPLAY} could be found for processing.\n\nPlease check:\n1. That your required (Y) column(s) have data.\n2. That at least one field is marked as required (Y) in your Validation Conditions.",
        noSourceDataSuffix: '_No source data',
        perfectMatch: 'Perfect Matches',
        matchFailedLabel: 'Failed Matches',
        unmatchedTarget: 'Unmatched Target Headers',
        unmatchedSource: 'Unmatched Source Headers',
        mappingSuccessFormat: 'Match',
        mappingFailureFormat: 'Not Match',
        // Example Generation
        exampleTargetSheet: 'Target Sheet (Manufacturing)',
        exampleImportSourceSheet: 'Source_Import (Manufacturing)',
        exampleVerifySourceSheet: 'Source_Verify (Manufacturing)',
        exampleCompareSourceSheet: 'Source_Compare (Manufacturing)',
        exampleDashboardSheet_Sales: 'Dashboard | Sales Analysis',
        exampleSalesLogSheet_Sales: 'Source | Sales Log',
        exampleCustomerMasterSheet_Sales: 'Source | Customer Master',
        exampleProductTargetsSheet_Sales: 'Source | Product Targets',
        exampleGenerationConfirmBody: 'This action will create three new sheets in the current file and apply sample data and formatting.\n\nIf sheets with the same names already exist, their content will be [OVERWRITTEN].\n\nAre you sure you want to continue?\n\n If you do not want to overwrite current example sheets, please click NO then continously running example guide processing of right side.',
        generatingExampleProcess: 'Processing',
        generatingExampleBody: 'Generating example, please wait...',
        generationSuccessTitle: 'Complete',
        generationSuccessBody: 'Manufacturing example has been generated successfully!',
        generationSuccessBodySales: 'Business & Sales example has been generated successfully!',
        operationCancelled: 'Operation cancelled.',
        deleteExamplesItem: 'üóëÔ∏è Delete Example Sheets',
        deleteExampleConfirmTitle: 'Confirm Deletion',
        deleteExampleConfirmBody: 'This will permanently delete the following example sheets:\n\n{SHEET_LIST}\n\nAre you sure you want to continue?',
        noExampleSheetsFound: 'No example sheets found to delete.',
        deleteExampleSuccess: 'Example sheets have been deleted successfully.',
        // Sales Example Data
        productLaptop: 'High-Performance Laptop',
        productKeyboard: 'Wireless Mechanical Keyboard',
        productMonitor: '27-inch 4K Monitor',
        productMouse: 'Wireless Mouse',
        customerA: 'Tech Giant Inc.',
        customerB: 'Creative Design Studio',
        customerC: 'Global Trade Ltd.',
        customerD: 'Digital Trends International',
        customerE: 'Apex Manufacturing Industries',
        regionNorth: 'North',
        regionCentral: 'Central',
        regionSouth: 'South',
        // Sales Example Headers
        headerOrderDate: 'Order Date',
        headerCustomerID: 'Customer ID',
        headerCustomerName: 'Customer Name',
        headerRegion: 'Region',
        headerSalesperson: 'Salesperson',
        headerProductName: 'Product Name',
        headerTotalSales: 'Total Sales',
        headerMonthlyTarget: 'Monthly Target',
        headerAchievementRate: 'Achievement Rate',
        headerQuantity: 'Quantity',
        headerUnitPrice: 'Unit Price',
        headerQuantity: 'Quantity',
        headerUnitPrice: 'Unit Price',
        // Error Messages
        errorNoImportSettingsFound: 'Could not find data import settings for sheet "{SHEET_NAME}". Please configure them first.',
        compareFailedTitle: 'Data Comparison Failed',
        errorNoCompareSettingsFound: 'Could not find data comparison settings for this sheet. Please configure them first via "Data Import Tool > Data Comparison Settings".',
        // --- Report Generator ---
        reportSettingsTitle: 'Report Generation Settings',
        sourceUrlPlaceholder: "Leave blank for current file, or paste URL for external file",
        exportReportButton: "Export Report",
        cancelButton: "Cancel",
        confirmExportButton: "Confirm Export",
        loadingMessage: "Loading...",
        generatingMessage: "Generating...",
        exportingMessage: "Exporting report, please wait...",
        exportSuccess: "Export successful!",
        exportFailure: "Export failed",
        exportSuccessSheet: "Report exported successfully! You can find it in the new sheet named \"{SHEET_NAME}\".",
        exportSuccessLink: "Report exported successfully! Click here to open the document:",
        backendValidationError: "Backend validation error",
        analysisError: "Analysis Error",
        executionError: "Execution Error",
        errorMissingSheetName: "Missing sheet name, cannot save settings.",
        errorSheetNotFound: "Sheet named \"{SHEET_NAME}\" not found in the specified spreadsheet.",
        errorInvalidRange: "Invalid range \"{RANGE}\". Please check your input.",
        errorAccessUrl: "Cannot access the provided URL. Please check the URL and your permissions.",
        errorNoHeaders: "Could not find any header data in the specified range {RANGE}. Please check your data range and ensure the first row contains field names.",
        errorNoAnalysisFields: "Please configure at least one analysis field.",
        errorNoDimensions: "Please configure at least one 'Dimension'.",
        errorNoMetrics: "Please configure at least one 'Metric'.",
        errorUnsupportedFormat: "Unsupported export format.",
        errorExportContent: "Please select content to export.",
        dataSourceTitle: "Data Source",
        fieldMappingTitle: "Field Mapping",
        analysisResultsTitle: "Analysis Results",
        exportSettingsTitle: "Export Settings",
        exportFormatTitle: "1. Select Export Format",
        exportContentTitle: "2. Select Content to Export",
        exportToSheetLabel: "Add to Google Sheet tab",
        exportToDocLabel: "Export to Google Docs",
        exportToPdfLabel: "Export as PDF",
        addAnalysisFieldButton: "+ Add Analysis Field",
        dimensionOption: "Dimension (Group By)",
        metricOption: "Metric (Calculate Value)",
        distributionChartTitle: "{DIMENSION} Distribution",
        chartByTitle: "{METRIC} by {DIMENSION}",
        kpiCardTitle: "Total {METRIC}",
        overviewTab: "Overview",
        analysisTab: "{DIMENSION} Analysis",
        minimizeHint: "Minimize",
        expandHint: "Expand Window",
        pinHint: "Pin Window",
        unminimizeHint: "Expand",
        collapseHint: "Collapse Window",
        unpinHint: "Unpin Window",
        metricWarningHint: "This field may contain non-numeric data and is not suitable as a metric.",
        pieChartLegendLabel: "Pie Chart: {DIMENSION} (Legend)",
        pieChartValuesLabel: "Pie Chart: {DIMENSION} (Values)",
        barChartLabel: "Bar Chart: {DIMENSION}",
        noDataForChart: "Not enough data to draw this chart.",
        pieChart: "Pie Chart",
        barChart: "Bar Chart",
        valuesSuffix: " (Values)",
    },
    'zh_TW': {
        // --- Main Menu ---
        mainMenuTitle: 'MasterDataAnalyzer',
        // --- Sub Menus ---
        importMenuTitle: 'Ë≥áÊñôÂåØÂÖ•Â∑•ÂÖ∑',
        validationMenuTitle: 'Ë≥áÊñôÈ©óË≠âÂ∑•ÂÖ∑',
        manageMenuTitle: 'Ë≥áÊñôÁÆ°ÁêÜÂ∑•ÂÖ∑',
        guideMenuTitle: 'ÁØÑ‰æãÁîüÊàêËàáÂäüËÉΩË™™Êòé',
        // --- Items ---
        settingsItem: '‚öôÔ∏è Ë≥áÊñôÂåØÂÖ•Ë®≠ÂÆö',
        manageSettingsItem: '‚öôÔ∏è Ë≥áÊñôÁõ£ÊéßÁÆ°ÁêÜË®≠ÂÆö',
        quickDeleteItem: 'üóëÔ∏è Âø´ÈÄüÂà™Èô§ÂàÜÈ†Å',
        reportSettingsItem: 'üìä Ë≥áÊñôÁîüÊàêÂ†±Ë°®Ë®≠ÂÆö',
        runImportItem: '‚ñ∂Ô∏è Ë≥áÊñôÂåØÂÖ•',
        stopImportItem: '‚èπÔ∏è ÁµÇÊ≠¢Âü∑Ë°åÂåØÂÖ•',
        resetImportItem: 'üîÑ Ê∏ÖÈô§ÂåØÂÖ•Ë≥áÊñôËàáÈÄ≤Á®ã',
        runCompareItem: '‚ñ∂Ô∏è Âü∑Ë°åË≥áÊñôÊØîÂ∞ç',
        compareSettingsItem: '‚öôÔ∏è Ë≥áÊñôÊØîÂ∞çË®≠ÂÆö',
        verifySettingsItem: '‚öôÔ∏è Ë≥áÊñôÈ©óË≠âË®≠ÂÆö',
        runMsModeItem: '‚ñ∂Ô∏è Âü∑Ë°åÈ©óË≠â (MS Á¥ØÂä†È†ÖÊ®°Âºè)',
        stopValidationItem: '‚èπÔ∏è ÁµÇÊ≠¢Âü∑Ë°åÈ©óË≠â',
        verifySumsItem: 'üîç È©óË≠âÁ∏ΩÂêàÈ†ÖËàáÁ¥ØÂä†È†ÖÊï∏ÂÄº',
        cleanupItem: 'üîÑ Ê∏ÖÈô§È©óË≠âË≥áÊñôËàáÈÄ≤Á®ã',
        monitorMenuName: 'Ë≥áÊñôËÆäÊõ¥Áõ£Êéß',
        enableNotifyItem: 'üü¢ ÂïüÁî®Ëá™ÂãïÈÄöÁü•',
        disableNotifyItem: 'üî¥ ÂÅúÁî®Ëá™ÂãïÈÄöÁü•',
        checkNowItem: '‚úâÔ∏è Á´ãÂç≥Ê™¢Êü•‰∏¶ÈÄöÁü•',
        privacyPolicyItem: 'Èö±ÁßÅÊ¨äÊîøÁ≠ñ',
        // --- Guide Sub-menu Items (Placeholders) ---
        manufacturingGuide: 'ÁîüÁî¢Ë£ΩÈÄ†ÁØÑ‰æã',
        manufacturingProductionTitle: 'ÁîüÁî¢Ë£ΩÈÄ†',
        businessGuide: 'Ê•≠ÂãôÁµ±Ë®àÁØÑ‰æã',
        // hrGuide: '‰∫∫Ë≥áÁÆ°ÁêÜÁØÑ‰æã',
        startBusinessGuide: '‚ñ∂Ô∏è ÂïüÂãï‰∫íÂãïÊïôÂ≠∏ (Ê•≠ÂãôÁµ±Ë®à)',
        startManufacturingGuide: '‚ñ∂Ô∏è ÂïüÂãï‰∫íÂãïÊïôÂ≠∏ (ÁîüÁî¢Ë£ΩÈÄ†)',
        // --- HTML UI Titles ---
        importSettingsTitle: 'Ë≥áÊñôÂåØÂÖ•Ë®≠ÂÆö',
        compareSettingsTitle: 'Ë≥áÊñôÊØîÂ∞çË®≠ÂÆö',
        verifySettingsTitle: 'Ë≥áÊñôÈ©óË≠âË®≠ÂÆö',
        manageSettingsTitle: 'Ë≥áÊñôÁõ£ÊéßÁÆ°ÁêÜË®≠ÂÆö',
        quickDeleteTitle: 'Âø´ÈÄüÂà™Èô§ÂàÜÈ†Å',
        reportSettingsTitle: 'Ë≥áÊñôÁîüÊàêÂ†±Ë°®Ë®≠ÂÆö',
        sheetSelectionTitle: 'ÈÅ∏ÊìáÂàÜÈ†Å',
        privacyPolicyTitle: 'Èö±ÁßÅÊ¨äÊîøÁ≠ñ',
        // Privacy Policy Content
        privacyLastUpdated: 'ÊúÄÂæåÊõ¥Êñ∞Êó•ÊúüÔºö2025Âπ¥9Êúà2Êó•',
        privacyIntro: "ÊÑüË¨ùÊÇ®‰ΩøÁî® MasterDataAnalyzer (‰ª•‰∏ãÁ∞°Á®±„ÄåÊú¨Â§ñÊéõ„Äç)„ÄÇÊàëÂÄëËá¥ÂäõÊñº‰øùË≠∑ÊÇ®ÁöÑÈö±ÁßÅÔºå‰∏¶ËÆìÊÇ®Ê∏ÖÊ•ö‰∫ÜËß£ÊàëÂÄëÂ¶Ç‰ΩïËôïÁêÜÊÇ®ÁöÑË≥áÊñô„ÄÇÊú¨Â§ñÊéõÁöÑÊâÄÊúâÊìç‰ΩúÂùáÂú®ÊÇ®ÁöÑ Google Â∏≥Êà∂ÂÖßÈÉ®ÂÆåÊàêÔºåÊàëÂÄë‰∏çÊúÉÊî∂ÈõÜ„ÄÅÂÑ≤Â≠òÊàñËàá‰ªª‰ΩïÁ¨¨‰∏âÊñπÂàÜ‰∫´ÊÇ®ÁöÑÂÄã‰∫∫Ë≥áË®äÊàñÊñá‰ª∂ÂÖßÂÆπ„ÄÇ",
        privacyDataCollectionTitle: 'Ë≥áÊñôÊî∂ÈõÜËàá‰ΩøÁî®',
        privacyDataCollectionP1: "Êú¨Â§ñÊéõÊòØ‰∏ÄÂÄãÂª∫Á´ãÂú® Google Apps Script ‰∏äÁöÑÂ∑•ÂÖ∑ÔºåÊó®Âú®Âπ´Âä©ÊÇ®ËôïÁêÜ Google Sheets ‰∏≠ÁöÑË≥áÊñô„ÄÇ",
        privacyDataCollectionL1: '**‰∏çÊî∂ÈõÜÂÄã‰∫∫Ë≥áË®ä**ÔºöÊàëÂÄë‰∏çÊúÉË¶ÅÊ±Ç„ÄÅÊî∂ÈõÜÊàñÂÑ≤Â≠ò‰ªª‰ΩïÊÇ®ÁöÑÂÄã‰∫∫Ë∫´‰ªΩË≥áË®äÔºå‰æãÂ¶ÇÂßìÂêç„ÄÅÈõªÂ≠êÈÉµ‰ª∂Âú∞ÂùÄÊàñËÅØÁµ°Ë≥áË®ä„ÄÇ',
        privacyDataCollectionL2: '**Ë≥áÊñôËôïÁêÜ**ÔºöÊâÄÊúâË≥áÊñôÁöÑËÆÄÂèñ„ÄÅËôïÁêÜËàáÂØ´ÂÖ•Êìç‰ΩúÔºåÈÉΩÁõ¥Êé•Âú®ÊÇ®ÊéàÊ¨äÁöÑ Google Sheets„ÄÅGoogle Docs Êàñ Google Drive Ê™îÊ°à‰∏≠ÈÄ≤Ë°å„ÄÇË≥áÊñô‰∏çÊúÉË¢´ÂÇ≥Ëº∏Âà∞ÊàëÂÄëÁöÑ‰º∫ÊúçÂô®Êàñ‰ªª‰ΩïÂ§ñÈÉ®ÊúçÂãô„ÄÇ',
        privacyDataCollectionL3: "**Ë®≠ÂÆöÂÑ≤Â≠ò**ÔºöÊÇ®ÁÇ∫Êú¨Â§ñÊéõÊâÄÂÅöÁöÑË®≠ÂÆöÔºà‰æãÂ¶ÇË≥áÊñô‰æÜÊ∫ê„ÄÅÊ¨Ñ‰ΩçÂ∞çÊáâÁ≠âÔºâÊúÉ‰ΩøÁî® Google Apps Script ÂÖßÂª∫ÁöÑ `PropertiesService` ÂÑ≤Â≠òÂú®ËàáÊÇ®ÁöÑ Google Êñá‰ª∂Á∂ÅÂÆöÁöÑÂ±¨ÊÄß‰∏≠„ÄÇÈÄô‰∫õË®≠ÂÆöÂÉÖ‰æõÊú¨Â§ñÊéõÂú®ÊÇ®ÁöÑÂ∏≥Êà∂‰∏≠ÈÅã‰ΩúÊôÇËÆÄÂèñÔºåÊàëÂÄëÁÑ°Ê≥ïÂæûÂ§ñÈÉ®Â≠òÂèñ„ÄÇ",
        privacySecurityTitle: 'ÂÆâÂÖ®ÊÄßËÅ≤ÊòéËàáÊ¨äÈôêË™™Êòé',
        privacySecurityP1: 'ÁÇ∫‰∫ÜÊèê‰æõÂÆåÊï¥ÁöÑÂäüËÉΩÔºåÊú¨Â§ñÊéõÂú®ÂÆâË£ùÊôÇÊúÉÂêëÊÇ®Ë´ãÊ±Ç‰ª•‰∏ã Google ÊúçÂãôÁöÑÊéàÊ¨ä„ÄÇÈÄô‰∫õÊ¨äÈôêÂÉÖÁî®ÊñºÂØ¶ÁèæÊâÄËø∞‰πãÁâπÂÆöÂäüËÉΩÔºåÁµï‰∏çÊúÉÁî®ÊñºÂÖ∂‰ªñÁõÆÁöÑ„ÄÇ',
        privacySecurityP2: '‰ª•‰∏ãÊòØÊ†πÊìöÊÇ® `appsscript.json` Ê™îÊ°à‰∏≠ `oauthScopes` ÁöÑË©≥Á¥∞Ë™™ÊòéÔºö',
        privacyScopeSpreadsheetsTitle: '`https://www.googleapis.com/auth/spreadsheets`',
        privacyScopeSpreadsheetsPermission: 'Ê¨äÈôêÔºöÊü•Áúã„ÄÅÁ∑®ËºØ„ÄÅÂª∫Á´ãÂíåÂà™Èô§ÊÇ®ÁöÑ Google Sheets Ë©¶ÁÆóË°®„ÄÇ',
        privacyScopeSpreadsheetsPurpose: "Áî®ÈÄîÔºöÈÄôÊòØÊú¨Â§ñÊéõÁöÑÊ†∏ÂøÉÊ¨äÈôê„ÄÇÊàëÂÄëÈúÄË¶ÅÊ≠§Ê¨äÈôê‰æÜÔºö",
        privacyScopeSpreadsheetsUse1: 'ËÆÄÂèñÊÇ®ÊåáÂÆöÁöÑ‰æÜÊ∫êË©¶ÁÆóË°®Ë≥áÊñô„ÄÇ',
        privacyScopeSpreadsheetsUse2: 'Â∞áËôïÁêÜÂæåÁöÑË≥áÊñôÂØ´ÂÖ•ÊÇ®ÁöÑÁõÆÊ®ôË©¶ÁÆóË°®„ÄÇ',
        privacyScopeSpreadsheetsUse3: 'Âª∫Á´ãÂ†±Ë°®„ÄÅÁØÑ‰æãË≥áÊñôÁ≠âÊñ∞ÂàÜÈ†Å„ÄÇ',
        privacyScopeSpreadsheetsUse4: 'Âü∑Ë°å„ÄåÂø´ÈÄüÂà™Èô§ÂàÜÈ†Å„ÄçÂäüËÉΩ„ÄÇ',
        privacyScopeDocumentsTitle: '`https://www.googleapis.com/auth/documents`',
        privacyScopeDocumentsPermission: 'Ê¨äÈôêÔºöÊü•Áúã„ÄÅÁ∑®ËºØ„ÄÅÂª∫Á´ãÂíåÂà™Èô§ÊÇ®ÁöÑ Google Docs Êñá‰ª∂„ÄÇ',
        privacyScopeDocumentsPurpose: 'Áî®ÈÄîÔºöÊ≠§Ê¨äÈôêÂÉÖÁî®Êñº„ÄåÂåØÂá∫Â†±Ë°®„ÄçÂäüËÉΩ„ÄÇÁï∂ÊÇ®ÈÅ∏ÊìáÂ∞áÂàÜÊûêÁµêÊûúÂåØÂá∫ÁÇ∫ Google Êñá‰ª∂ÊôÇÔºåÊú¨Â§ñÊéõÊúÉÂª∫Á´ã‰∏Ä‰ªΩÊñ∞ÁöÑ Google Doc ‰∏¶Â∞áÂ†±Ë°®ÂÖßÂÆπÂØ´ÂÖ•ÂÖ∂‰∏≠„ÄÇ',
        privacyScopeDriveTitle: '`https://www.googleapis.com/auth/drive`',
        privacyScopeDrivePermission: 'Ê¨äÈôêÔºöÊü•Áúã„ÄÅÁ∑®ËºØ„ÄÅÂª∫Á´ãÂíåÂà™Èô§ÊÇ® Google Drive ‰∏≠ÁöÑÁâπÂÆöÊ™îÊ°à„ÄÇ',
        privacyScopeDrivePurpose: 'Áî®ÈÄîÔºöÊ≠§Ê¨äÈôê‰∏ªË¶ÅÊîØÊè¥„ÄåÂåØÂá∫Â†±Ë°®„ÄçÂäüËÉΩÔºö',
        privacyScopeDriveUse1: 'Áï∂ÊÇ®ÈÅ∏ÊìáÂåØÂá∫ÁÇ∫ Google Êñá‰ª∂ÊôÇÔºåÈúÄË¶ÅÊ≠§Ê¨äÈôêÂú®ÊÇ®ÁöÑÈõ≤Á´ØÁ°¨Á¢ü‰∏≠Âª∫Á´ãË©≤Êñá‰ª∂„ÄÇ',
        privacyScopeDriveUse2: 'Áï∂ÊÇ®ÈÅ∏ÊìáÂåØÂá∫ÁÇ∫ PDF ÊôÇÔºåÊú¨Â§ñÊéõÊúÉÂÖàÂª∫Á´ã‰∏Ä‰ªΩ Google Êñá‰ª∂ÔºåÁÑ∂ÂæåÂ∞áÂÖ∂ËΩâÊèõÁÇ∫ PDF Ê™îÊ°àÂÑ≤Â≠òËá≥ÊÇ®ÁöÑÈõ≤Á´ØÁ°¨Á¢üÔºå‰∏¶ÂèØËÉΩÂà™Èô§ÈÅéÁ®ã‰∏≠ÁöÑÊö´Â≠òÊñá‰ª∂„ÄÇ',
        privacyScopeGmailTitle: '`https://www.googleapis.com/auth/gmail.send`',
        privacyScopeGmailPermission: 'Ê¨äÈôêÔºöÂÖÅË®±Êú¨Â§ñÊéõ‰ª£Ë°®ÊÇ®ÂÇ≥ÈÄÅÈõªÂ≠êÈÉµ‰ª∂„ÄÇ**ÔºàÊ≥®ÊÑèÔºöÊú¨Â§ñÊéõÁÑ°Ê≥ïËÆÄÂèñÊÇ®ÁöÑ‰ªª‰ΩïÈÉµ‰ª∂Ôºâ**',
        privacyScopeGmailPurpose: 'Áî®ÈÄîÔºöÊ≠§Ê¨äÈôêÂÉÖÁî®Êñº„ÄåË≥áÊñôËÆäÊõ¥Áõ£Êéß„ÄçÂäüËÉΩ„ÄÇÁï∂ÊÇ®Ë®≠ÂÆöÁöÑÂÑ≤Â≠òÊ†ºÁØÑÂúçÁôºÁîüËÆäÊõ¥ÊôÇÔºåÊú¨Â§ñÊéõÊúÉ‰æùÁÖßÊÇ®ÁöÑË®≠ÂÆöÔºåËá™ÂãïÂÇ≥ÈÄÅÈÄöÁü•ÈÉµ‰ª∂Âà∞ÊÇ®ÊåáÂÆöÁöÑ‰ø°ÁÆ±„ÄÇ',
        privacyScopeUITitle: '`https://www.googleapis.com/auth/script.container.ui`',
        privacyScopeUIPermission: 'Ê¨äÈôêÔºöÂú® Google Sheets ‰∏≠È°ØÁ§∫‰ΩøÁî®ËÄÖ‰ªãÈù¢„ÄÇ',
        privacyScopeUIPurpose: 'Áî®ÈÄîÔºöÊú¨Â§ñÊéõÈúÄË¶ÅÊ≠§Ê¨äÈôêÊâçËÉΩÂú®ÊÇ®ÁöÑË©¶ÁÆóË°®‰∏äÈ°ØÁ§∫ÊâÄÊúâÊìç‰Ωú‰ªãÈù¢Ôºå‰æãÂ¶ÇË®≠ÂÆöË¶ñÁ™ó„ÄÅÂÅ¥ÈÇäÊ¨Ñ„ÄÅÂ∞çË©±Ê°ÜËàáËá™Ë®ÇÈÅ∏ÂñÆ„ÄÇ',
        privacyScopeScriptAppTitle: '`https://www.googleapis.com/auth/script.scriptapp`',
        privacyScopeScriptAppPermission: 'Ê¨äÈôêÔºöÂÖÅË®± Apps Script Âª∫Á´ãÂèäÁÆ°ÁêÜÊåá‰ª§Á¢ºËß∏ÁôºÂô®„ÄÇ',
        privacyScopeScriptAppPurpose: 'Áî®ÈÄîÔºöÊ≠§Ê¨äÈôêÁî®ÊñºÂª∫Á´ã `onOpen` Ëß∏ÁôºÂô®Ôºå‰ª•‰æøÂú®ÊÇ®ÊâìÈñãË©¶ÁÆóË°®ÊôÇËá™ÂãïÁîüÊàê„ÄåMasterDataAnalyzer„ÄçÈÅ∏ÂñÆ„ÄÇÂêåÊôÇ‰πüÁî®Êñº„ÄåË≥áÊñôËÆäÊõ¥Áõ£Êéß„ÄçÂäüËÉΩÔºå‰ª•Âª∫Á´ãÂÅµÊ∏¨Â∑•‰ΩúË°®ËÆäÊõ¥ÁöÑËß∏ÁôºÂô®„ÄÇ',
        privacyScopeExternalRequestTitle: '`https://www.googleapis.com/auth/script.external_request`',
        privacyScopeExternalRequestPermission: 'Ê¨äÈôêÔºöÂÖÅË®± Apps Script ÈÄ£Êé•Âà∞Â§ñÈÉ®Á∂≤Ë∑ØÊúçÂãô„ÄÇ',
        privacyScopeExternalRequestPurpose: 'Áî®ÈÄîÔºöÁõÆÂâçÁâàÊú¨‰∏≠ÔºåÊú¨Â§ñÊéõ**‰∏çÊúÉ**‰∏ªÂãïÂêë‰ªª‰ΩïÈùû Google ÁöÑÂ§ñÈÉ®‰º∫ÊúçÂô®ÁôºÈÄÅË´ãÊ±ÇÊàñÂÇ≥Ëº∏ÊÇ®ÁöÑË≥áÊñô„ÄÇÊ≠§Ê¨äÈôêÊòØÁÇ∫‰∫Ü‰øùÁïôÊú™‰æÜÂèØËÉΩÁöÑÂäüËÉΩÊì¥ÂÖÖÊÄßÔºà‰æãÂ¶ÇÔºåÈÄ£Êé•Ëá≥ÂÖ¨ÈñãÁöÑ API ÊúçÂãôÔºâÔºå‰ΩÜÁèæÈöéÊÆµ‰∏¶Êú™‰ΩøÁî®„ÄÇ',
        privacyScopeStorageTitle: '`https://www.googleapis.com/auth/script.storage`',
        privacyScopeStoragePermission: 'Ê¨äÈôêÔºöÂÖÅË®± Apps Script ÂÑ≤Â≠òÂ∞ëÈáèË≥áÊñô„ÄÇ',
        privacyScopeStoragePurpose: 'Áî®ÈÄîÔºöÂ¶ÇÂâçËø∞„ÄåË®≠ÂÆöÂÑ≤Â≠ò„ÄçÊâÄËø∞ÔºåÊàëÂÄë‰ΩøÁî®Ê≠§Ê¨äÈôê‰æÜ‰øùÂ≠òÊÇ®Â∞çÂêÑÂÄãÂäüËÉΩÁöÑË®≠ÂÆöÔºå‰ª•‰æøÊÇ®‰∏ãÊ¨°‰ΩøÁî®ÊôÇÁÑ°ÈúÄÈáçÊñ∞Ëº∏ÂÖ•„ÄÇ',
        privacyChangesTitle: 'ÊîøÁ≠ñËÆäÊõ¥',
        privacyChangesP1: 'ÊàëÂÄëÂèØËÉΩÊúÉ‰∏çÊôÇÊõ¥Êñ∞Êú¨Èö±ÁßÅÊ¨äÊîøÁ≠ñ„ÄÇ‰ªª‰ΩïËÆäÊõ¥ÈÉΩÂ∞áÁôºÂ∏ÉÂú®Ê≠§È†ÅÈù¢‰∏äÔºåÊàëÂÄëÈºìÂãµÊÇ®ÂÆöÊúüÊü•Áúã„ÄÇ',
        privacyContactTitle: 'ËÅØÁµ°ÊàëÂÄë',
        privacyContactP1: 'Â¶ÇÊûúÊÇ®Â∞çÊú¨Èö±ÁßÅÊ¨äÊîøÁ≠ñÊúâ‰ªª‰ΩïÁñëÂïèÔºåË´ãÈÄèÈÅé [tsengmercury@gmail.com] ËàáÊàëÂÄëËÅØÁπ´„ÄÇ',
        // --- NEW: Dashboard Generator UI ---
        sectionFieldMapping: 'Ê¨Ñ‰ΩçÂ∞çÊáâ',
        regionColumnLabel: 'Âú∞ÂçÄÊ¨Ñ‰Ωç',
        productColumnLabel: 'Áî¢ÂìÅ/È†ÖÁõÆÊ¨Ñ‰Ωç',
        salesColumnLabel: 'Êï∏ÂÄºÊ¨Ñ‰Ωç (Èä∑ÂîÆÈ°ç)',
        generateReportButton: 'ÁîüÊàêÂ†±Ë°®',
        step1Title: 'Á¨¨‰∏ÄÊ≠•ÔºöÊ∫ñÂÇôÂéüÂßãÊï∏Êìö',
        step1Description: 'ÈÄôÊòØ‰∏ÄÂºµÂÖ∏ÂûãÁöÑÈä∑ÂîÆÊµÅÊ∞¥Â∏≥ÔºåÂåÖÂê´‰∫ÜÊó•Êúü„ÄÅÂú∞ÂçÄ„ÄÅÁî¢ÂìÅÂíåÈä∑ÂîÆÈ°çÁ≠âË≥áË®ä„ÄÇ',
        // sourceSpreadsheetUrlLabel: '‰æÜÊ∫êË≥áÊñôË°® URL',
        sourceDataSheetNameLabel: '‰æÜÊ∫êË≥áÊñôÂàÜÈ†ÅÂêçÁ®±',
        sourceDataRangeLabel: 'Ë≥áÊñôÁØÑÂúç (ÂåÖÂê´Ê®ôÈ†≠)',
        sourceDataRangePlaceholder: '‰æãÂ¶Ç: A1:G100',
        generateDashboardButton: '‰∏ÄÈçµÁîüÊàêÂÑÄË°®Êùø',
        generatingDashboard: 'ÂÑÄË°®ÊùøÁîüÊàê‰∏≠...',
        step2Title: 'Á¨¨‰∫åÊ≠•ÔºöÊü•ÁúãÁîüÊàêÁµêÊûú',
        overviewTab: 'Á∏ΩË¶Ω',
        productAnalysisTab: 'Áî¢ÂìÅÂàÜÊûê',
        regionAnalysisTab: 'Âú∞ÂçÄÂàÜÊûê',
        rawDataTab: 'ÂéüÂßãÊï∏Êìö',
        salesOverviewTitle: 'Èä∑ÂîÆÁ∏ΩË¶Ω',
        totalSalesLabel: 'Á∏ΩÈä∑ÂîÆÈ°ç',
        totalOrdersLabel: 'Á∏ΩË®ÇÂñÆÊï∏',
        regionSalesDistributionTitle: 'ÂêÑÂú∞ÂçÄÈä∑ÂîÆ‰ΩîÊØî',
        productSalesAnalysisTitle: 'ÂêÑÁî¢ÂìÅÈä∑ÂîÆÂàÜÊûê',
        totalSalesAxisTitle: 'Á∏ΩÈä∑ÂîÆÈ°ç',
        productAxisTitle: 'Áî¢ÂìÅ',
        regionSalesAnalysisTitle: 'ÂêÑÂú∞ÂçÄÈä∑ÂîÆÂàÜÊûê',
        regionAxisTitle: 'Âú∞ÂçÄ',
        errorTitle: 'ÈåØË™§',
        requiredFieldsError: 'ÊÇ®ÈÅ∏ÂèñÁöÑÁØÑÂúç‰∏≠ÂøÖÈ†àÂåÖÂê´‰ª•‰∏ãÊ®ôÈ†≠Ôºö{HEADERS}„ÄÇË´ãÊ™¢Êü•ÊÇ®ÁöÑË≥áÊñôÁØÑÂúç„ÄÇ',
        // Tutorial Steps
        businessGuideTutorialTitle: 'Ê•≠ÂãôÁµ±Ë®àÁØÑ‰æã - ‰∫íÂãïÊïôÂ≠∏',
        manufacturingGuideTutorialTitle: 'ÁîüÁî¢Ë£ΩÈÄ†ÁØÑ‰æã - ‰∫íÂãïÊïôÂ≠∏',
        // Business Tutorial
        businessWelcomeTitle: "Ê≠°ËøéÔºÅ (Ê•≠ÂãôÁµ±Ë®à)",
        businessWelcomeInstruction: "Ê≠°Ëøé‰æÜÂà∞„ÄåÊ•≠ÂãôÁµ±Ë®àÁØÑ‰æã„ÄçÁöÑ‰∫íÂãïÊïôÂ≠∏„ÄÇ\n\nÊàëÂÄëÁöÑÁõÆÊ®ôÊòØÂ∞á‰∏Ä‰ªΩ‰∏çÂÆåÊï¥ÁöÑÈä∑ÂîÆÁ¥ÄÈåÑÔºåÈÄèÈÅé MasterDataAnalyzer ÁöÑÂäüËÉΩÔºåËÆäÊàê‰∏Ä‰ªΩÂÆåÊï¥ÁöÑÂàÜÊûêÂ†±Ë°®„ÄÇ\n\nÈªûÊìä„Äå‰∏ã‰∏ÄÊ≠•„ÄçÈñãÂßãÊàëÂÄëÁöÑÁ¨¨‰∏ÄÂÄã‰ªªÂãôÔºÅ",
        businessTask1Step1Title: "‰ªªÂãô‰∏ÄÔºöË≥áÊñôÂåØÂÖ• (1/6)",
        businessTask1Step1Instruction: "È¶ñÂÖàÔºåË´ãÁ¢∫Ë™çÊÇ®Â∑≤ÂïüÁî® <code>{SHEET_NAME}</code> ÂàÜÈ†Å„ÄÇ\n\nÊàëÂÄëÁöÑÁõÆÊ®ôÊòØÂ∞á <code>{SOURCE_SHEET_NAME}</code> ÁöÑÈä∑ÂîÆÁ¥ÄÈåÑÔºåÁØ©ÈÅ∏ÂæåÂåØÂÖ•Âà∞ÁõÆÂâçÁöÑÂÑÄË°®Êùø‰∏≠„ÄÇ",
        businessTask1Step2Title: "‰ªªÂãô‰∏ÄÔºöË≥áÊñôÂåØÂÖ• (2/6)",
        businessTask1Step2Instruction: "Ë´ãÈªûÊìäÈ†ÇÁ´ØÈÅ∏ÂñÆÁöÑ <code>MasterDataAnalyzer > Ë≥áÊñôÂåØÂÖ•Â∑•ÂÖ∑ > ‚öôÔ∏è Ë≥áÊñôÂåØÂÖ•Ë®≠ÂÆö</code>„ÄÇ",
        businessTask1Step3Title: "‰ªªÂãô‰∏ÄÔºöË≥áÊñôÂåØÂÖ• (3/6)",
        businessTask1Step3Instruction: "Âú®Ë®≠ÂÆöË¶ñÁ™ó‰∏≠ÔºåË´ãÈÄ≤Ë°å‰ª•‰∏ãË®≠ÂÆöÔºö\n1. **‰æÜÊ∫êË≥áÊñôË°® URL**: (Ë≤º‰∏äÁï∂ÂâçÊ™îÊ°àÁöÑÁ∂≤ÂùÄ)\n2. **‰æÜÊ∫êË≥áÊñôÂàÜÈ†ÅÂêçÁ®±**: ÈÅ∏Êìá <code>{SOURCE_SHEET_NAME}</code>\n3. **ÁõÆÊ®ôË≥áÊñôË°®ÂàÜÈ†ÅÂêçÁ®±**: ÊáâÊúÉËá™ÂãïÂ∏∂ÂÖ• <code>{TARGET_SHEET_NAME}</code>",
        businessTask1Step4Title: "‰ªªÂãô‰∏ÄÔºöË≥áÊñôÂåØÂÖ• (4/6)",
        businessTask1Step4Instruction: "Êé•ËëóÔºåË®≠ÂÆöË≥áÊñôÁØÑÂúçÔºö\n1. **Ë≥áÊñôÂåØÂÖ•ÁöÑÊ®ôÈ†≠‰πãËµ∑ÂßãÂàóÊï∏**: <code>1</code>\n2. **Ë≥áÊñôÂåØÂÖ•ÁöÑËµ∑ÂßãÂàóÊï∏**: <code>2</code>\n3. **‰æÜÊ∫êË≥áÊñôÂåØÂÖ•ÁØÑÂúç**: <code>A2:E9</code>",
        businessTask1Step5Title: "‰ªªÂãô‰∏ÄÔºöË≥áÊñôÂåØÂÖ• (5/6)",
        businessTask1Step5Instruction: "ÂÅáË®≠ÊàëÂÄëÂè™ÊÉ≥ÂàÜÊûê„Äå{PRODUCT_NAME}„ÄçÁöÑÊ•≠Á∏æÔºåË´ãÊñ∞Â¢û‰∏ÄÁ≠ÜÁØ©ÈÅ∏Ê¢ù‰ª∂Ôºö\n1. **Ê®ôÈ†≠ÂêçÁ®±**: <code>{HEADER_NAME}</code>\n2. **ÈóúÈçµÂ≠ó**: <code>{PRODUCT_NAME}</code>",
        businessTask1Step6Title: "‰ªªÂãô‰∏ÄÔºöË≥áÊñôÂåØÂÖ• (6/6)",
        businessTask1Step6Instruction: "Â§™Ê£í‰∫ÜÔºÅÊâÄÊúâË®≠ÂÆöÈÉΩÂ∑≤ÂÆåÊàê„ÄÇ\n\nË´ãÈªûÊìä„ÄåÂÑ≤Â≠òË®≠ÂÆö„Äç‰∏¶ÈóúÈñâË¶ñÁ™óÔºåÁÑ∂ÂæåÂæûÈÅ∏ÂñÆÂü∑Ë°å <code>MasterDataAnalyzer > Ë≥áÊñôÂåØÂÖ•Â∑•ÂÖ∑ > ‚ñ∂Ô∏è Ë≥áÊñôÂåØÂÖ•</code>„ÄÇ",
        businessCheckpointTitle: "‰ªªÂãô‰∏ÄÂÆåÊàêÔºÅ",
        businessCheckpointInstruction: "ÊÅ≠ÂñúÊÇ®ÔºÅÊÇ®Â∑≤ÊàêÂäüÂ∞áÂéüÂßãÊï∏ÊìöÂåØÂÖ•ÂÑÄË°®Êùø„ÄÇ\n\nÊÇ®ÊÉ≥ÁπºÁ∫åÂ≠∏Áøí‰∏ã‰∏ÄÂÄãÊ†∏ÂøÉÂäüËÉΩ„ÄåË≥áÊñôÊØîÂ∞ç„ÄçÂóéÔºü",
        businessTask2Step1Title: "‰ªªÂãô‰∫åÔºöË±êÂØåÂÆ¢Êà∂Ë≥áÊñô (1/3)",
        businessTask2Step1Instruction: "Â§™Ê£í‰∫ÜÔºÅÁèæÂú®ÂÑÄË°®ÊùøÊúâ‰∫ÜÂéüÂßãÊï∏ÊìöÔºå‰ΩÜÈÇÑÁº∫Â∞ëÂÆ¢Êà∂ÁöÑË©≥Á¥∞Ë≥áË®ä„ÄÇ\n\nÊé•‰∏ã‰æÜÔºåÊàëÂÄëÂ∞á‰ΩøÁî®„ÄåË≥áÊñôÊØîÂ∞ç„ÄçÂäüËÉΩÔºåÂæû \"[‰æÜÊ∫ê] ÂÆ¢Êà∂‰∏ªÊ™î\" ‰∏≠Êü•Êâæ‰∏¶Â°´ÂÖ•ÂÆ¢Êà∂Ë≥áÊñô„ÄÇ\n\nÊâìÈñã <code>Ë≥áÊñôÂåØÂÖ•Â∑•ÂÖ∑ > ‚öôÔ∏è Ë≥áÊñôÊØîÂ∞çË®≠ÂÆö</code>Ôºå‰∏¶ÈñãÂßãÈÄ≤Ë°å‰ªªÂãô‰∫åÁöÑË®≠ÂÆöÔºö",
        businessTask2Step2Title: "‰ªªÂãô‰∫åÔºöË±êÂØåÂÆ¢Êà∂Ë≥áÊñô (2/3)",
        businessTask2Step2Instruction: "Ë´ãÈÄ≤Ë°å‰ª•‰∏ãË®≠ÂÆöÔºö\n1. **‰æÜÊ∫êÂàÜÈ†Å**: Ë´ãÈÅ∏Êìá \"‰æÜÊ∫êË≥áÊñôÂàÜÈ†ÅÂêçÁ®±\" ÁÇ∫ <code>{SOURCE_SHEET_NAME}</code>ÔºåËÄå \"ÁõÆÊ®ôË≥áÊñôË°®ÂàÜÈ†ÅÂêçÁ®±\" ÁÇ∫ <code>{TARGET_SHEET_NAME}</code>„ÄÇ\n2. \"ÁõÆÊ®ôË≥áÊñôËµ∑ÂßãÂàóÊï∏\" Ë®≠ÂÆöÁÇ∫ <code>2</code>Ôºå\"‰æÜÊ∫êË≥áÊñôÊØîÂ∞çÁØÑÂúç\" Ë®≠ÂÆöÁÇ∫ <code>A2:D6</code>„ÄÇ\n3. \"Ë≥áÊñôÊØîÂ∞çÊ¨Ñ‰ΩçÂ∞çÊáâ\" Ë´ã‰æùÁÖß‰∏ãÊñπÈ†ÜÂ∫èÈÄê‰∏ÄË®≠ÂÆöÔºö\n¬† - **ÁõÆÊ®ôÊü•ÊâæÊ¨Ñ‰Ωç**: <code>B</code> (ÂÆ¢Êà∂ID)\n¬† - **‰æÜÊ∫êÊØîÂ∞çÊ¨Ñ‰Ωç**: <code>A</code> (ÂÆ¢Êà∂ID)\n¬† - **‰æÜÊ∫êËøîÂõûÊ¨Ñ‰Ωç**: <code>B</code> (ÂÆ¢Êà∂ÂÖ®Âêç)\n¬† - **ÁõÆÊ®ôÂØ´ÂÖ•Ê¨Ñ‰Ωç**: <code>C</code> (ÂÆ¢Êà∂ÂÖ®Âêç)",
        businessTask2Step3Title: "‰ªªÂãô‰∫åÔºöË±êÂØåÂÆ¢Êà∂Ë≥áÊñô (3/3)",
        businessTask2Step3Instruction: "Ë®≠ÂÆöÂÑ≤Â≠òÂæåÔºåË´ãÂü∑Ë°å <code>MasterDataAnalyzer > Ë≥áÊñôÂåØÂÖ•Â∑•ÂÖ∑ > ‚ñ∂Ô∏è Âü∑Ë°åË≥áÊñôÊØîÂ∞ç</code>„ÄÇ\n\nÈÄôÊôÇÊÇ®Â∞áÊúÉÁúãÂà∞ÂÆ¢Êà∂ÂÖ®ÂêçÂ∑≤Ë¢´ÊàêÂäüÂåØÂÖ•„ÄÇË´ãÈáçË§áÊ≠§Êìç‰ΩúÔºåÂ∞á \"ÊâÄÂ±¨Âú∞ÂçÄ\" Âíå \"Ë≤†Ë≤¨Ê•≠ÂãôÂì°\" ‰πü‰∏Ä‰ΩµÂ°´ÂÖ•ÔºåÊÇ®Â∞áÂèØ‰ª•ÂæóÂà∞ÂÆåÊï¥ÁöÑÊ•≠ÂãôÁµ±Ë®àÂÑÄË°®ÊùøÂõâ„ÄÇ",
        businessTask3Step1Title: "‰ªªÂãô‰∏âÔºöÊØîÂ∞çÈä∑ÂîÆÁõÆÊ®ô (1/2)",
        businessTask3Step1Instruction: "ÂÑÄË°®ÊùøÁöÑË≥áÊñôË∂ä‰æÜË∂äÂÆåÊï¥‰∫ÜÔºÅÊúÄÂæå‰∏ÄÊ≠•ÔºåËÆìÊàëÂÄë‰æÜÊØîÂ∞çÊØèÈ†ÖÁî¢ÂìÅÁöÑÈä∑ÂîÆÁõÆÊ®ô„ÄÇ\n\nË´ãÂÜçÊ¨°ÊâìÈñã„ÄåË≥áÊñôÊØîÂ∞çË®≠ÂÆö„Äç„ÄÇ",
        businessTask3Step2Title: "‰ªªÂãô‰∏âÔºöÊØîÂ∞çÈä∑ÂîÆÁõÆÊ®ô (2/2)",
        businessTask3Step2Instruction: "ÈÄôÊ¨°ÔºåË´ãÁî® \"Áî¢ÂìÅÂêçÁ®±\" ‰ΩúÁÇ∫ÁõÆÊ®ôÂ∞çÊØîÂü∫Ê∫ñÔºå‰∏¶ÈÅ∏Êìá \"‰æÜÊ∫êË≥áÊñôÂàÜÈ†ÅÂêçÁ®±\" ÁÇ∫ <code>{SOURCE_SHEET_NAME}</code>„ÄÇ<br>\"‰æÜÊ∫êË≥áÊñôÊØîÂ∞çÁØÑÂúç\" Ë´ãË®≠ÂÆöÁÇ∫ <code>A2:B5</code>Ôºå\"Ë≥áÊñôÊØîÂ∞çÊ¨Ñ‰ΩçÂ∞çÊáâ\" Ë´ã‰æùÁÖß‰∏ãÊñπÈ†ÜÂ∫èÈÄê‰∏ÄË®≠ÂÆöÔºö<br>¬† - **ÁõÆÊ®ôÊü•ÊâæÊ¨Ñ‰Ωç**: <code>F</code> (Áî¢ÂìÅÂêçÁ®±)<br>¬† - **‰æÜÊ∫êÊØîÂ∞çÊ¨Ñ‰Ωç**: <code>A</code> (Áî¢ÂìÅÂêçÁ®±)<br>¬† - **‰æÜÊ∫êËøîÂõûÊ¨Ñ‰Ωç**: <code>B</code> (ÁõÆÊ®ôÊúàÈä∑ÂîÆÈ°ç)<br>¬† - **ÁõÆÊ®ôÂØ´ÂÖ•Ê¨Ñ‰Ωç**: <code>J</code> (ÁõÆÊ®ôÊúàÈä∑ÂîÆÈ°ç)<br><br>Êé•ËëóÔºåÂÜçÊ¨°Âü∑Ë°å \"Ë≥áÊñôÊØîÂ∞ç\"„ÄÇ",
        businessFinalStepTitle: "ÊÅ≠ÂñúÊÇ®ÔºåÂàÜÊûêÂÆåÊàêÔºÅ",
        businessFinalStepInstruction: "ÊâÄÊúâË≥áÊñôÈÉΩÂ∑≤Âà∞‰ΩçÔºÅÊÇ®ÁèæÂú®ÊìÅÊúâ‰∫Ü‰∏Ä‰ªΩ‰πæÊ∑®„ÄÅÂÆåÊï¥ÁöÑÊï∏Êìö„ÄÇ\n\nÊé•‰∏ã‰æÜÔºåÊÇ®ÂèØ‰ª•ÊâãÂãïÊàñÈªûÊìä‰∏ãÊñπÊåâÈàïÔºåÂú®Â∞çÊáâÁöÑÊ¨Ñ‰Ωç‰∏≠Â°´ÂÖ•ÂÖ¨Âºè‰æÜÂÆåÊàêÊúÄÂæåÁöÑË®àÁÆóÔºö\n- **Á∏ΩÈä∑ÂîÆÈ°ç**: <code>=H2*I2</code> (Êï∏Èáè * ÂñÆÂÉπ)\n- **Ê•≠Á∏æÈÅîÊàêÁéá**: <code>=G2/J2</code> (Á∏ΩÈä∑ÂîÆÈ°ç / ÁõÆÊ®ôÊúàÈä∑ÂîÆÈ°ç)",
        // Manufacturing Tutorial
        mfgWelcomeTitle: "Ê≠°ËøéÔºÅ (ÁîüÁî¢Ë£ΩÈÄ†)",
        mfgWelcomeInstruction: "Ê≠°Ëøé‰æÜÂà∞„ÄåÁîüÁî¢Ë£ΩÈÄ†ÁØÑ‰æã„ÄçÁöÑ‰∫íÂãïÊïôÂ≠∏„ÄÇ\n\nÊ≠§ÊïôÂ≠∏Â∞áÂºïÂ∞éÊÇ®‰ΩøÁî® MasterDataAnalyzer ÁöÑ„ÄåË≥áÊñôÂåØÂÖ• (Èô£ÂàóÊ®°Âºè)„ÄçËàá„ÄåË≥áÊñôÈ©óË≠â„ÄçÂäüËÉΩÔºåÂ∞áË§áÈõúÁöÑÁâ©ÊñôÊ∏ÖÂñÆËΩâÊèõÁÇ∫Ê®ôÊ∫ñÂåñÊ†ºÂºèÔºå‰∏¶Ëàá‰∏ªË≥áÊñôÈÄ≤Ë°åÊØîÂ∞ç„ÄÇ",
        mfgTask1Step1Title: "‰ªªÂãô‰∏ÄÔºöË≥áÊñôÂåØÂÖ• (1/6)",
        mfgTask1Step1Instruction: "È¶ñÂÖàÔºåË´ãÁ¢∫Ë™çÊÇ®Â∑≤ÂïüÁî® <code>{SHEET_NAME}</code> ÂàÜÈ†Å„ÄÇ\n\nÊàëÂÄëÁöÑÁõÆÊ®ôÊòØÂ∞á <code>{SOURCE_SHEET_NAME}</code> ‰∏≠ÈùûÁµêÊßãÂåñÁöÑË≥áÊñôÔºåËΩâÊèõ‰∏¶ÂåØÂÖ•Âà∞ÁõÆÂâçÁöÑÁõÆÊ®ôÂ∑•‰ΩúË°®‰∏≠„ÄÇ",
        mfgTask1Step2Title: "‰ªªÂãô‰∏ÄÔºöË≥áÊñôÂåØÂÖ•Ë®≠ÂÆö (2/6)",
        mfgTask1Step2Instruction: "Ë´ãÈªûÊìäÈ†ÇÁ´ØÈÅ∏ÂñÆÁöÑ <code>MasterDataAnalyzer > Ë≥áÊñôÂåØÂÖ•Â∑•ÂÖ∑ > ‚öôÔ∏è Ë≥áÊñôÂåØÂÖ•Ë®≠ÂÆö</code>„ÄÇ",
        mfgTask1Step3Title: "‰ªªÂãô‰∏ÄÔºöË≥áÊñôÂåØÂÖ•Ë®≠ÂÆö (3/6)",
        mfgTask1Step3Instruction: "Âú®Ë®≠ÂÆöË¶ñÁ™ó‰∏≠ÔºåË´ãÈÄ≤Ë°å‰ª•‰∏ãË®≠ÂÆöÔºö\n1. **‰æÜÊ∫êË≥áÊñôË°® URL**: (Ë≤º‰∏äÁï∂ÂâçÊ™îÊ°àÁöÑÁ∂≤ÂùÄ)\n2. **‰æÜÊ∫êË≥áÊñôÂàÜÈ†ÅÂêçÁ®±**: ÈÅ∏Êìá <code>{SOURCE_SHEET_NAME}</code>\n3. **ÁõÆÊ®ôË≥áÊñôË°®ÂàÜÈ†ÅÂêçÁ®±**: ÊáâÊúÉËá™ÂãïÂ∏∂ÂÖ• <code>{TARGET_SHEET_NAME}</code>",
        mfgTask1Step4Title: "‰ªªÂãô‰∏ÄÔºöË≥áÊñôÂåØÂÖ•Ë®≠ÂÆö (4/6)",
        mfgTask1Step4Instruction: "Êé•‰∏ã‰æÜÊòØÈóúÈçµÊ≠•È©üÔºåÂïüÁî®„ÄåË≥áÊñôÈô£ÂàóÊØîÂ∞ç„ÄçÊ®°ÂºèÔºö\n1. **Ë≥áÊñôÂåØÂÖ•ÁöÑÊ®ôÈ†≠‰πãËµ∑ÂßãÂàóÊï∏**: <code>3</code>\n2. **Ë≥áÊñôÂåØÂÖ•ÁöÑËµ∑ÂßãÂàóÊï∏**: <code>4</code>\n3. **‰æÜÊ∫êË≥áÊñôÂåØÂÖ•ÁØÑÂúç**: <code>A9:E14</code>\n4. **ÂÖ∂‰ªñÂçÄÂ°äÁöÑÊ®ôÈ†≠ÁöÑËµ∑ÂßãÂàóÊï∏**: <code>F2:I2</code>\n5. **ÂÖ∂‰ªñÂçÄÂ°äÁöÑÊ®ôÈ†≠ÂÖßÁöÑÊï∏ÊìöÁØÑÂúç**: <code>F9:I14</code>",
        mfgTask1Step5Title: "‰ªªÂãô‰∏ÄÔºöË≥áÊñôÁØ©ÈÅ∏Ë®≠ÂÆö (5/6)",
        mfgTask1Step5Instruction: "Âú®ÁØ©ÈÅ∏ËàáÈ©óË≠âÂäüËÉΩÂçÄÂ°äË£°ÔºåÊÇ®ÂèØ‰ª•Ëá™Ë°åÊåëÈÅ∏ÊÉ≥ÂåØÂÖ•ÁöÑÊ®ôÈ†≠ËàáÈóúÈçµÂ≠óÁØ©ÈÅ∏„ÄÇ\n1. Âú® \"‰æÜÊ∫êÊ®ôÈ†≠ÂåØÂÖ•ÁØÑÂúçË®≠ÂÆö\" Ëº∏ÂÖ• <code>A8:E8</code>\n2. Âú® \"ÈóúÈçµÂ≠óÁØ©ÈÅ∏Ê¢ù‰ª∂ (AND)\" ÈÅ∏Êìá <code>Owner</code>\n3. ÈªûÊìäÈóúÈçµÂ≠óÂè≥ÂÅ¥ \"ÈÅ∏Âèñ\" ÊñπÂ°äÈÅ∏Êìá <code>Mark</code>„ÄÅ<code>Linda</code>„ÄÅ<code>Mary</code>",
        mfgTask1Step6Title: "‰ªªÂãô‰∏ÄÔºöÂü∑Ë°åË≥áÊñôÂåØÂÖ• (6/6)",
        mfgTask1Step6Instruction: "Áï∂Ë≥áÊñôÂåØÂÖ•Ë®≠ÂÆöÂÆåÊàêÂæåË´ãÂà•ÂøòË®òÈªûÊìä \"ÂÑ≤Â≠òË®≠ÂÆö\"„ÄÇË®≠ÂÆöËàáÂÑ≤Â≠òÂÆåÊàêÂæåÔºåË´ãÁπºÁ∫åÂü∑Ë°å <code>‚ñ∂Ô∏è Ë≥áÊñôÂåØÂÖ•</code>„ÄÇ\n\nÈÄôÊôÇÊÇ®ÊáâÊúÉÁúãÂà∞ A - G Ê¨ÑÁöÑÂåØÂÖ•Ë≥áÊñôÔºå‰ª£Ë°®ËëóË≥áÊñôÂ∑≤ÊàêÂäüÁØ©ÈÅ∏‰∏¶ÂåØÂÖ•Âõâ„ÄÇ",
        mfgCheckpointTitle: "‰ªªÂãô‰∏ÄÂÆåÊàêÔºÅ",
        mfgCheckpointInstruction: "ÊÅ≠ÂñúÔºÅÊÇ®Â∑≤ÊàêÂäüÂ∞áÈô£ÂàóË≥áÊñôËΩâÊèõ‰∏¶ÂåØÂÖ•„ÄÇ\n\nÊé•‰∏ã‰æÜÔºåÊÇ®ÊÉ≥Â≠∏ÁøíÂ¶Ç‰Ωï‰ΩøÁî®„ÄåË≥áÊñôÈ©óË≠â„ÄçÂäüËÉΩÔºå‰æÜÊØîÂ∞çÂåØÂÖ•ÁöÑË≥áÊñôËàá‰∏ªË≥áÊñôÁöÑÂ∑ÆÁï∞ÂóéÔºü",
        mfgTask2Step1Title: "‰ªªÂãô‰∫åÔºöË≥áÊñôÈ©óË≠âË®≠ÂÆö (1/4)",
        mfgTask2Step1Instruction: "ÂæàÂ•ΩÔºÅÁèæÂú®ÊàëÂÄë‰æÜÈ©óË≠âÂåØÂÖ•Ë≥áÊñôÁöÑÊ≠£Á¢∫ÊÄß„ÄÇ\n\nË´ãÊâìÈñã <code>MasterDataAnalyzer > Ë≥áÊñôÈ©óË≠âÂ∑•ÂÖ∑ > ‚öôÔ∏è Ë≥áÊñôÈ©óË≠âË®≠ÂÆö</code>„ÄÇ",
        mfgTask2Step2Title: "‰ªªÂãô‰∫åÔºöË≥áÊñôÁØÑÂúçË®≠ÂÆö (2/4)",
        mfgTask2Step2Instruction: "Âú®[Ë≥áÊñôÈ©óË≠â]Ë®≠ÂÆöË¶ñÁ™ó‰∏≠ÔºåË´ãÈÄ≤Ë°å‰ª•‰∏ãË®≠ÂÆöÔºö<br>1. **‰æÜÊ∫êË≥áÊñôË°® URL**: (Ë≤º‰∏äÁï∂ÂâçÊ™îÊ°àÁöÑÁ∂≤ÂùÄ)<br>2. **‰æÜÊ∫êË≥áÊñôÂàÜÈ†ÅÂêçÁ®±**: ÈÅ∏Êìá <code>{SOURCE_SHEET_NAME}</code><br>3. Ë´ã‰æùÁÖß‰∏ãÂàóË®≠ÂÆöÈ†ÜÂ∫èÂ°´Â¶•Ë≥áÊñôÁØÑÂúçË®≠ÂÆöÔºö<br>¬† ¬†- Ë≥áÊñôÈ©óË≠âÂæåÂåØÂÖ•ÁöÑËµ∑ÂßãÂàóÊï∏Ë´ãÂ°´ÂÖ• <code>4</code><br>¬† ¬†- ÁõÆÊ®ôË≥áÊñôÊ®ôÈ†≠Ëµ∑ÂßãÂàóË´ãÂ°´ÂÖ• <code>3</code><br>¬† ¬†- ‰æÜÊ∫êË≥áÊñôÊ®ôÈ†≠Ëµ∑ÂßãÂàóË´ãÂ°´ÂÖ• <code>1</code><br><br>Êé•‰∏ã‰æÜÁπºÁ∫å‰∏ã‰∏ÄÊ≠•ÔºåÂ∞áÈñãÂßãË®≠ÂÆö \"Ê¨Ñ‰ΩçÈ©óË≠âÊ¢ù‰ª∂\" Ëàá \"È©óË≠âÁµêÊûúËº∏Âá∫\"„ÄÇ",
        mfgTask2Step3Title: "‰ªªÂãô‰∫åÔºöÊ¨Ñ‰ΩçÈ©óË≠âË®≠ÂÆö (3/4)",
        mfgTask2Step3Instruction: "Âú®Ê¨Ñ‰ΩçËàáÈ©óË≠âÊ¢ù‰ª∂ÂäüËÉΩÂçÄÂ°äË£°ÔºåÈ¶ñÂÖàË¶ÅË®≠ÂÆöÁöÑÊòØ \"ÁõÆÊ®ôÂ∑•‰ΩúË°®Ê¨Ñ‰Ωç\" Ëàá \"‰æÜÊ∫êÂ∑•‰ΩúË°®Ê¨Ñ‰Ωç\" ÁöÑÂ∞çÊáâÈóú‰øÇ„ÄÇ<br>Âª∫Ë≠∞ÊÇ®ÂèØ‰ª•ÂÑ™ÂÖà‰ΩøÁî® <b>Ëá™ÂãïÂ∞çÊáâÈ©óË≠âÊ¨Ñ‰Ωç</b> ÂäüËÉΩÔºåÊ≠§ÂäüËÉΩÂ∞áÊúÉ <b>Ëá™ÂãïÂåπÈÖçËàáÊé®Ëñ¶</b> ÂêàÈÅ©ÁöÑÊ®ôÈ†≠Áµ¶ÊÇ®Ë®≠ÂÆö„ÄÇ<br>Âú®Ê≠§È†Ö‰ªªÂãôË£°ÔºåÊ¨Ñ‰ΩçÈ©óË≠âË¶ÅË®≠ÂÆöÁöÑÊ¢ù‰ª∂Â¶Ç‰∏ãÔºö<br>ÁõÆÊ®ôÂ∑•‰ΩúË°®Ê¨Ñ‰Ωç - ‰æÜÊ∫êÂ∑•‰ΩúË°®Ê¨Ñ‰Ωç<br><code>B</code> - <code>B</code><br><code>C</code> - <code>C</code><br><code>D</code> - <code>D</code><br><code>E</code> - <code>E</code><br><code>G</code> - <code>A</code>",
        mfgTask2Step4Title: "‰ªªÂãô‰∫åÔºöÈ©óË≠âÁµêÊûúËº∏Âá∫Ë®≠ÂÆö (4/4)",
        mfgTask2Step4Instruction: "Êé•ËëóË®≠ÂÆöÁï∂È©óË≠âÊàêÂäüÊôÇÔºåË¶ÅÂæû‰æÜÊ∫êÂõûÂ°´ÁöÑË≥áÊñôÊ¨Ñ‰Ωç„ÄÇ<br>ÂêåÊ®£Âú∞ÔºåÊÇ®‰πüÂèØ‰ª•‰ΩøÁî® <b>Ëá™ÂãïÂ∞çÊáâËº∏Âá∫Ê¨Ñ‰Ωç</b> ÂäüËÉΩ‰æÜÂä†ÈÄüË®≠ÂÆö„ÄÇ<br>È©óË≠âÁµêÊûúËº∏Âá∫Ë¶ÅË®≠ÂÆöÁöÑÊ¨Ñ‰ΩçÊ¢ù‰ª∂Â¶Ç‰∏ãÔºö<br>ÁõÆÊ®ôÂ∑•‰ΩúË°®Ê¨Ñ‰Ωç - ‰æÜÊ∫êÂ∑•‰ΩúË°®Ê¨Ñ‰Ωç<br><code>H</code> - <code>F</code><br><code>I</code> - <code>G</code><br><code>J</code> - <code>H</code><br><br>ÊúÄÂæåÔºåÊàëÂÄëÂ∞á \"‰∏çÂêªÂêàË≥áË®äËº∏Âá∫\" ÁöÑÊ¨Ñ‰ΩçË®≠ÁÇ∫ <code>K</code>Ôºå‰ª•‰æøËÖ≥Êú¨Â∞áÈåØË™§Ë®äÊÅØÂØ´ÂÖ•Ê≠§Ëôï„ÄÇ",
        mfgFinalStepTitle: "ÊâÄÊúâË®≠ÂÆöÈÉΩÂ∑≤Ê∫ñÂÇôÂ∞±Á∑íÔºÅ",
        mfgFinalStepInstruction: "Ë´ãË®òÂæóÈªûÊìä [ÂÑ≤Â≠òË®≠ÂÆö]ÔºåÁÑ∂ÂæåÈñãÂßãÂü∑Ë°å <code>Ë≥áÊñôÈ©óË≠âÂ∑•ÂÖ∑ > ‚ñ∂Ô∏è Âü∑Ë°åÈ©óË≠â (MS Á¥ØÂä†È†ÖÊ®°Âºè)</code>ÔºÅ<br><br>Âü∑Ë°åÂæåÔºåË´ãÊü•Áúã <code>{SHEET_NAME}</code> ÁöÑ K Ê¨ÑÔºåÊÇ®ÊúÉÁúãÂà∞ËÖ≥Êú¨Â∑≤Ëá™ÂãïÊ®ôÁ§∫Âá∫ÊâÄÊúâ‰∏çÂêªÂêàÁöÑÈ†ÖÁõÆÂèäÂÖ∂ÂéüÂõ†„ÄÇ",
        sectionSourceAndTarget: '‰æÜÊ∫êËàáÁõÆÊ®ô',
        sectionDataRanges: 'Ë≥áÊñôÁØÑÂúç',
        sectionFilterAndValidate: 'ÁØ©ÈÅ∏ËàáÈ©óË≠â',
        sectionValidationConditions: 'Ê¨Ñ‰ΩçÈ©óË≠âÊ¢ù‰ª∂',
        sectionValidationOutputs: 'È©óË≠âÁµêÊûúËº∏Âá∫',
        sectionMismatchOutput: '‰∏çÂêªÂêàË≥áË®äËº∏Âá∫',
        sectionDataManagement: 'Ë≥áÊñôÁÆ°ÁêÜË®≠ÂÆö',
        sectionRangesAndConditions: 'Ë≥áÊñôÁØÑÂúçËàáÊØîÂ∞çÊ¢ù‰ª∂',
        sectionFieldMapping: 'Ë≥áÊñôÊØîÂ∞çÊ¨Ñ‰ΩçÂ∞çÊáâ',
        closeButton: 'ÈóúÈñâ',
        saveButton: 'ÂÑ≤Â≠òË®≠ÂÆö',
        selectButton: 'ÈÅ∏Âèñ',
        okButton: 'Á¢∫ÂÆö',
        defaultTemplateButton: 'È†êË®≠Ê®°Êùø',
        removeAllButton: 'ÁßªÈô§ÊâÄÊúâÊ¨Ñ‰Ωç',
        checkButton: 'Ê™¢Êü•',
        pinWindowTooltip: 'ÈáòÈÅ∏Ë¶ñÁ™ó',
        unpinWindowTooltip: 'ÂèñÊ∂àÈáòÈÅ∏Ë¶ñÁ™ó',
        expandWindowTooltip: 'Êì¥Â±ïË¶ñÁ™ó',
        collapseWindowTooltip: 'Êî∂ÂêàË¶ñÁ™ó',
        dragAndActionHelp: 'ÈªûÊìä‰∏äÊñπÊ®ôÈ°åÂàóÂè≥ÂÅ¥Á©∫ÁôΩÂçÄÂüü‰æÜÊãñÊõ≥Ë¶ñÁ™ó\nÈªûÊìäÂè≥ÂÅ¥ÂúñÁ§∫ÂèØÊì¥Â±ïÊàñÈáòÈÅ∏„ÄÇ',
        // sourceSpreadsheetUrlLabel: '‰æÜÊ∫êË≥áÊñôË°® URL',
        sourceDataSheetNameLabel: '‰æÜÊ∫êË≥áÊñôÂàÜÈ†ÅÂêçÁ®±',
        // Import Settings UI
        currentTargetSheetNameLabel: 'ÁõÆÊ®ôË≥áÊñôË°®ÂàÜÈ†ÅÂêçÁ®±',
        settingsForSheetHint: 'Áï∂ÂâçÂÑ≤Â≠òË®≠ÂÆöÁöÑÈ†ÅÈù¢Ôºö{SHEET_NAME}',
        importHeaderStartRowLabel: 'Ë≥áÊñôÂåØÂÖ•ÁöÑÊ®ôÈ†≠‰πãËµ∑ÂßãÂàóÊï∏',
        importDataStartRowLabel: 'Ë≥áÊñôÂåØÂÖ•ÁöÑËµ∑ÂßãÂàóÊï∏',
        sourceDataRangeLabel: '‰æÜÊ∫êË≥áÊñôÂåØÂÖ•ÁØÑÂúç',
        validationHeaderStartRowLabel: 'ÂÖ∂‰ªñÂçÄÂ°äÁöÑÊ®ôÈ†≠ÁöÑËµ∑ÂßãÂàóÊï∏',
        validationMatrixRangeLabel: 'ÂÖ∂‰ªñÂçÄÂ°äÁöÑÊ®ôÈ†≠ÂÖßÁöÑÊï∏ÊìöÁØÑÂúç',
        headerImportFilterLabel: '‰æÜÊ∫êÊ®ôÈ†≠ÂåØÂÖ•ÁØÑÂúçË®≠ÂÆö',
        keywordFiltersLabel: 'ÈóúÈçµÂ≠óÁØ©ÈÅ∏Ê¢ù‰ª∂ (AND)',
        addFilterConditionLabel: '+ Êñ∞Â¢ûÁØ©ÈÅ∏Ê¢ù‰ª∂',
        headerPlaceholder: 'Ê®ôÈ†≠ÂêçÁ®±',
        keywordsPlaceholder: 'ÈóúÈçµÂ≠ó (‰ª•ÈÄóËôüÂàÜÈöî)',
        dataStartRowLabel: 'Ë≥áÊñôÈ©óË≠âÂæåÂåØÂÖ•ÁöÑËµ∑ÂßãÂàóÊï∏',
        verifySourceUrlLabel: '‰æÜÊ∫êË≥áÊñôË°® URL',
        verifySourceSheetNameLabel: '‰æÜÊ∫êË≥áÊñôÂàÜÈ†ÅÂêçÁ®±',
        mismatchColumnLabel: '‰∏çÂêªÂêàÊèèËø∞Ëº∏Âá∫Ê¨Ñ‰Ωç',
        targetHeaderRowLabel: 'ÁõÆÊ®ôË≥áÊñôÊ®ôÈ†≠Ëµ∑ÂßãÂàó',
        sourceHeaderRowLabel: '‰æÜÊ∫êË≥áÊñôÊ®ôÈ†≠Ëµ∑ÂßãÂàó',
        targetColumnLabel: 'ÁõÆÊ®ôÂ∑•‰ΩúË°®Ê¨Ñ‰Ωç',
        sourceColumnLabel: '‰æÜÊ∫êÂ∑•‰ΩúË°®Ê¨Ñ‰Ωç',
        primaryValidationLabel: 'Ë®≠ÁÇ∫‰∏ªË¶ÅÈ©óË≠âÊ¢ù‰ª∂',
        selectAllLabel: 'ÂÖ®ÈÅ∏/ÂèñÊ∂àÊâÄÊúâÈ©óË≠âÊ¢ù‰ª∂',
        fieldMappingJSONLabel: 'Ê¨Ñ‰ΩçÂ∞çÊáâËàáÈ©óË≠âË®≠ÂÆö',
        checkEmptyValuesButton: 'Ê™¢Êü•‰æÜÊ∫êÁ©∫ÂÄº',
        monitorRangeLabel: 'Êñá‰ª∂ÂÖßÂÆπËÆäÊõ¥Ëá™ÂãïÈÄöÁü•',
        monitorEmailLabel: 'ÈÄöÁü•Êé•Êî∂ËÄÖ Email',
        monitorSubjectLabel: 'ÈÄöÁü•Ê®ôÈ°å',
        monitorBodyLabel: 'ÈÄöÁü•ÂÖßÊñá',
        addValidationMappingButton: '+ Êñ∞Â¢ûÈ©óË≠âÊ¨Ñ‰Ωç',
        autoMapValidationButton: 'Ëá™ÂãïÂ∞çÊáâÈ©óË≠âÊ¨Ñ‰Ωç',
        addOutputMappingButton: '+ Êñ∞Â¢ûËº∏Âá∫Ê¨Ñ‰Ωç',
        autoMapOutputButton: 'Ëá™ÂãïÂ∞çÊáâËº∏Âá∫Ê¨Ñ‰Ωç',
        targetStartRowLabel: 'ÁõÆÊ®ôË≥áÊñôËµ∑ÂßãÂàóÊï∏',
        targetStartRowHelp: 'ÂæûÊ≠§ÂàóËôüÈñãÂßãËÆÄÂèñÁõÆÊ®ôË≥áÊñô‰∏¶ÂØ´ÂÖ•ÊØîÂ∞çÁµêÊûú„ÄÇ',
        sourceCompareRangeLabel: '‰æÜÊ∫êË≥áÊñôÊØîÂ∞çÁØÑÂúç',
        sourceCompareRangeHelp: 'Âú®‰æÜÊ∫êÂàÜÈ†Å‰∏≠ÔºåÂåÖÂê´„ÄåÊØîÂ∞çÊ¨Ñ„ÄçËàá„ÄåËøîÂõûÊ¨Ñ„ÄçÁöÑÁØÑÂúç„ÄÇ',
        targetLookupColLabel: 'ÁõÆÊ®ôÊü•ÊâæÊ¨Ñ‰Ωç',
        targetLookupColHelp: 'ÁõÆÊ®ôÂ∑•‰ΩúË°®‰∏≠ÔºåË¶ÅÁî®‰æÜÊü•ÊâæÂÄºÁöÑÊ¨Ñ‰Ωç„ÄÇ',
        targetWriteColLabel: 'ÁõÆÊ®ôÂØ´ÂÖ•Ê¨Ñ‰Ωç',
        targetWriteColHelp: 'Â∞áÊØîÂ∞çÁµêÊûúÂØ´ÂÖ•Ê≠§Ê¨Ñ‰Ωç„ÄÇ',
        sourceLookupColLabel: '‰æÜÊ∫êÊØîÂ∞çÊ¨Ñ‰Ωç',
        sourceLookupColHelp: 'Âú®„ÄåÊØîÂ∞çÁØÑÂúç„Äç‰∏≠ÔºåÁî®‰æÜË¢´ÊØîÂ∞çÁöÑÊ¨Ñ‰Ωç„ÄÇ',
        sourceReturnColLabel: '‰æÜÊ∫êËøîÂõûÊ¨Ñ‰Ωç',
        sourceReturnColHelp: 'Âú®„ÄåÊØîÂ∞çÁØÑÂúç„Äç‰∏≠ÔºåÊâæÂà∞ÂæåË¶ÅËøîÂõûÁöÑÊ¨Ñ‰Ωç„ÄÇ',
        sourceUrlHelp: 'Ë´ãË≤º‰∏ä‰æÜÊ∫ê Google Sheet ÁöÑÂÆåÊï¥Á∂≤ÂùÄ„ÄÇ',
        importHeaderStartRowHelp: "Êï∏ÊìöÊúÄÂâçÊñπÁöÑÊ¨Ñ‰ΩçÁöÑÂàÜÈ°ûÂêçÁ®±Âç≥ÁÇ∫Ê®ôÈ†≠„ÄÇ",
        importDataStartRowHelp: 'Ë≥áÊñôÂæûÁõÆÊ®ôÂàÜÈ†ÅÁöÑÁ¨¨ÂπæÂàóÈñãÂßãÂØ´ÂÖ•„ÄÇ',
        sourceDataRangeHelp: "Ê®ôÈ†≠‰πãÂæåÁöÑÊï∏ÊìöÁöÑË°åÂàóÁØÑÂúç„ÄÇ",
        validationHeaderStartRowHelp: "Ëã•Â°´ÂØ´Ê≠§Ê¨Ñ‰ΩçÔºåÂ∞áÂïüÁî®„ÄåË≥áÊñôÈô£ÂàóÊØîÂ∞ç„ÄçÊ®°Âºè„ÄÇÊ≠§ÂäüËÉΩÂèØËÆì„ÄåË≥áÊñôÂåØÂÖ•‰πãÊ®ôÈ†≠„ÄçÂ∞çÁÖß„ÄåÂÖ∂‰ªñÂçÄÂ°äÁöÑÊ®ôÈ†≠ÁöÑËµ∑ÂßãÂàóÊï∏„Äç‰∏¶Â∞áÈ†ÖÁõÆÊï∏ÊìöÁµ±Ë®àÁöÑË≥áÊñôÂàóÂá∫„ÄÇ",
        headerImportFilterHelp: 'ÈÅ∏Â°´„ÄÇÊåáÂÆöË¶ÅÂåØÂÖ•ÁöÑÊ®ôÈ†≠ÔºåÂèØ‰ΩøÁî®ÈÄóËôüÂàÜÈöîÁöÑÂàóË°® (Ê®ôÈ†≠1,Ê®ôÈ†≠2) Êàñ‰æÜÊ∫êÂ∑•‰ΩúË°®‰∏äÁöÑÁØÑÂúç (A1:D1)„ÄÇËã•ÁïôÁ©∫ÔºåÂâáÊúÉÂåØÂÖ•„Äå‰æÜÊ∫êË≥áÊñôÂåØÂÖ•ÁØÑÂúç„ÄçÂÖßÁöÑÊâÄÊúâÊ¨Ñ‰Ωç„ÄÇ',
        verifyStartRowHelp: "Ë≥áÊñôÈ©óË≠âÁöÑËµ∑ÂßãÂàóÊï∏Â∞á‰æùÊìöË®≠ÂÆöÂàóÊï∏ÈñãÂßãÊõ¥Êñ∞",
        verifySourceUrlHelp: 'Áî®‰æÜÈÄ≤Ë°åË≥áÊñôÊ†°Â∞çÁöÑË©¶ÁÆóË°®Á∂≤ÂùÄ„ÄÇ',
        mismatchColumnHelp: 'Áî®‰æÜËº∏Âá∫‰∏çÂêªÂêàË≥áË®äÁöÑÊ¨Ñ‰ΩçÂ≠óÊØç (‰æãÂ¶Ç: K)„ÄÇ',
        targetHeaderRowHelp: 'ÁõÆÊ®ôÂ∑•‰ΩúË°®‰∏≠ÔºåÊ®ôÈ†≠ÊâÄÂú®ÁöÑÂàóÊï∏„ÄÇ',
        sourceHeaderRowHelp: '‰æÜÊ∫êÂ∑•‰ΩúË°®‰∏≠ÔºåÊ®ôÈ†≠ÊâÄÂú®ÁöÑÂàóÊï∏„ÄÇ',
        monitorRangeHelp: 'Ë´ãÊåáÂÆöË¶ÅÁõ£ÊéßËÆäÊõ¥ÁöÑÂÑ≤Â≠òÊ†ºÁØÑÂúç (‰æãÂ¶Ç A2:E20)„ÄÇ',
        monitorEmailHelp: 'Ë´ãËº∏ÂÖ•Ë¶ÅÊé•Êî∂ÈÄöÁü•ÁöÑ Email Âú∞ÂùÄ„ÄÇ',
        monitorSubjectHelp: 'Ëá™Ë®ÇÈÄöÁü•ÈÉµ‰ª∂ÁöÑÊ®ôÈ°å„ÄÇÂèØ‰ΩøÁî® {SHEET_NAME} ‰ΩúÁÇ∫È†êÁïô‰ΩçÁΩÆ„ÄÇ',
        monitorBodyHelp: 'Ëá™Ë®ÇÈÄöÁü•ÈÉµ‰ª∂ÁöÑÂÖßÊñá„ÄÇÂèØ‰ΩøÁî®È†êÁïô‰ΩçÁΩÆÔºö{SHEET_NAME}, {RANGE}, {TIMESTAMP}, {CHANGES_COUNT}, {CHANGE_DETAILS}, {SHEET_URL}„ÄÇ',
        defaultSubjectTemplate: '[ËÆäÊõ¥ÈÄöÁü•] Â∑•‰ΩúË°® "{SHEET_NAME}" ÂÖßÂÆπÂ∑≤Êõ¥Êñ∞',
        defaultBodyTemplate: 'ÊÇ®Â•ΩÔºå\n\nÁ≥ªÁµ±ÂÅµÊ∏¨Âà∞ÊÇ®Áõ£ÊéßÁöÑË©¶ÁÆóË°®ÂÖßÂÆπÂ∑≤ÁôºÁîüËÆäÊõ¥„ÄÇ\n\nÂ∑•‰ΩúË°®ÂêçÁ®±: {SHEET_NAME}\nÁõ£ÊéßÁØÑÂúç: {RANGE}\nËÆäÊõ¥ÊôÇÈñì: {TIMESTAMP}\n\nËÆäÊõ¥Ë©≥ÊÉÖ ({CHANGES_COUNT} È†Ö):\n{CHANGE_DETAILS}\n\nË´ãÈªûÊìä‰ª•‰∏ãÈÄ£ÁµêÊü•ÁúãÊúÄÊñ∞ÂÖßÂÆπÔºö\n{SHEET_URL}',
        savingMessage: 'ÂÑ≤Â≠ò‰∏≠...',
        validatingMessage: 'Ë≥áÊñôÊ†°È©ó‰∏≠...',
        saveSuccess: 'Ë®≠ÂÆöÂ∑≤ÊàêÂäüÂÑ≤Â≠òÔºÅ',
        saveFailure: 'ÂÑ≤Â≠òË®≠ÂÆöÂ§±Êïó',
        autoMappingMessage: 'Ëá™ÂãïÂ∞çÊáâ‰∏≠...',
        autoMapSuccessBody: 'ÊàêÂäüÊâæÂà∞‰∏¶Âª∫Á´ã {COUNT} ÂÄãÊ¨Ñ‰ΩçÂ∞çÊáâÔºåË´ãÊ™¢Ë¶ñÂæåÂÑ≤Â≠ò„ÄÇ',
        autoMapNoMatchTitle: 'Êâæ‰∏çÂà∞Á¨¶ÂêàÈ†ÖÁõÆ',
        autoMapNoMatchBody: 'Âú®‰æÜÊ∫êËàáÁõÆÊ®ôÂ∑•‰ΩúË°®‰∏≠ÔºåÊâæ‰∏çÂà∞‰ªª‰ΩïÂêçÁ®±Áõ∏ÂêåÁöÑÊ®ôÈ†≠„ÄÇË´ãÊ™¢Êü•ÊÇ®ÁöÑË®≠ÂÆö„ÄÇ',
        checkingMessage: 'Ê™¢Êü•‰∏≠...',
        checkSuccess: 'Ê¨Ñ‰ΩçÊ™¢Êü•ÈÄöÈÅéÔºåÊ≤íÊúâÁ©∫ÂÄºÊàñÈáçË§áÂÄº„ÄÇ',
        checkFailure: 'Ê¨Ñ‰ΩçÊ™¢Êü•ÊèêÁ§∫Ôºö',
        importCancelled: '‰ΩøÁî®ËÄÖÂ∑≤ÂèñÊ∂àÂåØÂÖ•„ÄÇ',
        settingsError: 'Ë®≠ÂÆöÈåØË™§',
        headerLessThanStartError: '„ÄåË≥áÊñôÂåØÂÖ•ÁöÑÊ®ôÈ†≠‰πãËµ∑ÂßãÂàóÊï∏„ÄçÂøÖÈ†àÂ∞èÊñº„ÄåË≥áÊñôÂåØÂÖ•ÁöÑËµ∑ÂßãÂàóÊï∏„Äç„ÄÇ',
        preflightTitle: 'Ë®≠ÂÆöÁ¢∫Ë™ç',
        preflightWarning: 'ÊèêÈÜíÔºö',
        preflightFilterWarning: '- Êúâ‰∏ÄÂÄãÁØ©ÈÅ∏Ê¢ù‰ª∂Â∑≤ÊåáÂÆöÊ®ôÈ†≠‰ΩÜÊú™Â°´ÂØ´ÈóúÈçµÂ≠óÔºåË©≤Ê¢ù‰ª∂Â∞áË¢´ÂøΩÁï•„ÄÇ',
        preflightSuggestion: 'ÈÄôÂèØËÉΩÊòØÈùûÈ†êÊúüÁöÑÁµêÊûúÔºåÂª∫Ë≠∞Ê™¢Êü•ÊÇ®ÁöÑË®≠ÂÆö„ÄÇ',
        preflightConfirmation: 'ÊÇ®Á¢∫ÂÆöË¶ÅÁπºÁ∫åÂü∑Ë°åÂåØÂÖ•ÂóéÔºü',
        asymmetryWarningTitle: "Ë®≠ÂÆö‰∏çÂ∞çÁ®±Ë≠¶Âëä",
        asymmetryWarningBody: "ÊÇ®Ë®≠ÂÆöÁöÑ„Äå‰æÜÊ∫êË≥áÊñôÂåØÂÖ•ÁØÑÂúç„ÄçËàá„Äå‰æÜÊ∫êÊ®ôÈ†≠ÂåØÂÖ•ÁØÑÂúçË®≠ÂÆö„ÄçÊâÄÊ∂µËìãÁöÑÊ¨Ñ‰Ωç‰∏ç‰∏ÄËá¥„ÄÇ\n\nËÖ≥Êú¨Â∞áÂÑ™ÂÖàÊé°Áî®„Äå‰æÜÊ∫êÊ®ôÈ†≠ÂåØÂÖ•ÁØÑÂúçË®≠ÂÆö„ÄçÁöÑË®≠ÂÆö‰æÜÂåØÂÖ•Ë≥áÊñô„ÄÇ\n\nÁØÑÂúçÂÖßÁöÑÊ®ôÈ†≠Ôºö{RANGE_HEADERS}\nÁØ©ÈÅ∏Âô®Ê®ôÈ†≠Ôºö{FILTER_HEADERS}\n\nÊÇ®Á¢∫ÂÆöË¶ÅÁπºÁ∫åÂóéÔºü",
        filterMismatchTitle: "Êâæ‰∏çÂà∞Á¨¶ÂêàÊ¢ù‰ª∂ÁöÑË≥áÊñô",
        filterMismatchBody: "Â∑≤ÊâæÂà∞‰æÜÊ∫êË≥áÊñôÔºå‰ΩÜÊ≤íÊúâ‰ªª‰ΩïË≥áÊñôÂàóÁ¨¶ÂêàÊÇ®ÁöÑÁØ©ÈÅ∏Ê¢ù‰ª∂„ÄÇ\n\nË´ãÊ™¢Êü•ÊÇ®ÁöÑ„ÄåÈóúÈçµÂ≠óÁØ©ÈÅ∏Ê¢ù‰ª∂„Äç‰∏¶Á¢∫‰øùÂÆÉÂÄëËàá‰æÜÊ∫êË≥áÊñôÊ≠£Á¢∫Â∞çÊáâ„ÄÇ\n\nÁõÆÊ®ôÂ∑•‰ΩúË°®Â∞áÊúÉË¢´Ê∏ÖÁ©∫„ÄÇ",
        preCheckWarningTitle: 'ÊØîÂ∞çÊ¨Ñ‰ΩçË≠¶Âëä',
        preCheckWarningBody: 'Âú®Âü∑Ë°åÊØîÂ∞çÂâçÔºåÊñº„Äå‰æÜÊ∫êÊØîÂ∞çÊ¨Ñ‰Ωç„Äç({COLUMN}) ‰∏≠ÁôºÁèæ‰ª•‰∏ãÂïèÈ°åÔºö\n\n{MESSAGE}\n\nÁπºÁ∫åÂü∑Ë°åÂèØËÉΩÊúÉÂ∞éËá¥ÈùûÈ†êÊúüÁöÑÊØîÂ∞çÁµêÊûú„ÄÇÊÇ®Á¢∫ÂÆöË¶ÅÁπºÁ∫åÂóéÔºü',
        preCheckWarningBodyTarget: 'Âú®Âü∑Ë°åÊØîÂ∞çÂâçÔºåÊñº„ÄåÁõÆÊ®ôÊü•ÊâæÊ¨Ñ‰Ωç„Äç({COLUMN}) ‰∏≠ÁôºÁèæ‰ª•‰∏ãÂïèÈ°åÔºö\n\n{MESSAGE}\n\nÁπºÁ∫åÂü∑Ë°åÂèØËÉΩÊúÉÂ∞éËá¥ÈùûÈ†êÊúüÁöÑÊØîÂ∞çÁµêÊûú„ÄÇÊÇ®Á¢∫ÂÆöË¶ÅÁπºÁ∫åÂóéÔºü',
        preCheckCancelled: 'ÊØîÂ∞çÂ∑≤Áî±‰ΩøÁî®ËÄÖÂèñÊ∂à„ÄÇ',
        errorUrlRequired: '„Äå‰æÜÊ∫êË≥áÊñôË°® URL„Äç‰∏çÂèØÁÇ∫Á©∫„ÄÇ',
        errorSheetNameRequired: '„Äå‰æÜÊ∫êË≥áÊñôÂàÜÈ†ÅÂêçÁ®±„Äç‰∏çÂèØÁÇ∫Á©∫„ÄÇ',
        errorTargetSheetRequired: '„ÄåÁèæË°åË≥áÊñôË°®ÂàÜÈ†ÅÂêçÁ®±„Äç‰∏çÂèØÁÇ∫Á©∫„ÄÇ',
        errorVerifyUrlRequired: '„Äå‰æÜÊ∫êË≥áÊñôË°® URL„Äç‰∏çÂèØÁÇ∫Á©∫„ÄÇ',
        errorVerifySheetNameRequired: '„Äå‰æÜÊ∫êË≥áÊñôÂàÜÈ†ÅÂêçÁ®±„Äç‰∏çÂèØÁÇ∫Á©∫„ÄÇ',
        errorInvalidUrl: "ÁÑ°Ê≥ïÂ≠òÂèñÊÇ®Êèê‰æõÁöÑ URL„ÄÇË´ãÊ™¢Êü•Á∂≤ÂùÄÊòØÂê¶Ê≠£Á¢∫Ôºå‰ª•ÂèäÊÇ®ÊòØÂê¶ÊìÅÊúâÂ≠òÂèñÊ¨äÈôê„ÄÇ",
        errorInvalidHeaderRange: "ÁÑ°Ê≥ïÂæûÊåáÂÆöÁØÑÂúç '{RANGE}' ËÆÄÂèñÊ®ôÈ†≠„ÄÇË´ãÊ™¢Êü•Ë©≤ÁØÑÂúçËàá‰æÜÊ∫êÂàÜÈ†ÅÂêçÁ®±ÊòØÂê¶Ê≠£Á¢∫„ÄÇ",
        errorInvalidHeaderRow: "ÁÑ°Ê≥ïÂæûÂàóËôü {ROW_NUM} ËÆÄÂèñÊ®ôÈ†≠„ÄÇË´ãÊ™¢Êü•ÂàóËôüËàáÂàÜÈ†ÅÂêçÁ®±ÊòØÂê¶Ê≠£Á¢∫„ÄÇ",
        errorInvalidColumnFormat: "Ê†ºÂºèÈåØË™§ÔºåË´ãËº∏ÂÖ•ÊúâÊïàÁöÑÊ¨Ñ‰ΩçÂ≠óÊØç (‰æãÂ¶Ç: A, B, AA)„ÄÇ",
        errorInvalidColumnSave: "ÁÑ°Ê≥ïÂÑ≤Â≠òÔºåË´ã‰øÆÊ≠£Ê®ôÁ§∫ÁÇ∫Á¥ÖËâ≤ÁöÑÁÑ°ÊïàÊ¨Ñ‰ΩçÂ≠óÊØç„ÄÇ",
        noSheetsFound: "Âú®Ë©¶ÁÆóË°®‰∏≠Êâæ‰∏çÂà∞‰ªª‰ΩïÂàÜÈ†Å„ÄÇÂÆÉÂèØËÉΩÊòØÁ©∫ÁöÑÊàñÁÑ°Ê≥ïÂ≠òÂèñ„ÄÇ",
        emptyRowsFound: 'ÁôºÁèæÁ©∫ÂÄºÊñºÂàó: {ROWS}.',
        duplicateValuesFound: 'ÁôºÁèæÈáçË§áÂÄº: \'{VALUE}\' ÈáçË§áÊñºÂàó: {ROWS}',
        multipleDuplicateValuesFound: 'ÁôºÁèæÈáçË§áÂÄº: {DETAILS}',
        sourceCompareFieldCheckError: 'ÊåáÂÆöÁöÑ‰æÜÊ∫êÊØîÂ∞çÊ¨Ñ‰Ωç ({COLUMN}) ‰∏çÂú®‰æÜÊ∫êÊØîÂ∞çÁØÑÂúç ({RANGE}) ÂÖß„ÄÇ',
        targetLookupFieldCheckError: 'Âú®ÊåáÂÆöÁöÑÁõÆÊ®ôÊü•ÊâæÊ¨Ñ‰Ωç ({COLUMN}) ‰∏≠Êâæ‰∏çÂà∞Ë≥áÊñô„ÄÇË´ãÊ™¢Êü•Ê¨Ñ‰ΩçÂ≠óÊØçËàáÁõÆÊ®ôË≥áÊñôËµ∑ÂßãÂàóÊï∏„ÄÇ',
        unsavedWarningTitle: 'ÊèêÈÜí',
        unsavedWarningBody: 'ÈÅ∏ÊìáÂÖ∂‰ªñÂàÜÈ†ÅÊôÇËã•ÊúâÊú™ÂÑ≤Â≠òÁöÑË®≠ÂÆöÂ∞áË¢´Ê∏ÖÁ©∫ÔºåÂª∫Ë≠∞ÊÇ®Â∞çÁï∂ÂâçÂàÜÈ†ÅÁöÑË®≠ÂÆöÂÖàÂÑ≤Â≠ò„ÄÇ',
        saveAndContinueButton: 'ÂÑ≤Â≠òÁï∂ÂâçË®≠ÂÆö',
        continueAnywayButton: '‰ªçÁÑ∂ÁπºÁ∫å',
        duplicateHeaderWarning: "Âú®‰æÜÊ∫êË≥áÊñô‰∏≠ÂÅµÊ∏¨Âà∞ÈáçË§áÁöÑÊ®ôÈ†≠Ôºö{HEADERS}„ÄÇÁÇ∫Á¢∫‰øùÁØ©ÈÅ∏Ê∫ñÁ¢∫ÔºåË´ãÂú®„Äå‰æÜÊ∫êÊ®ôÈ†≠ÂåØÂÖ•ÁØÑÂúçË®≠ÂÆö„ÄçÊ¨Ñ‰Ωç‰∏≠ÊòéÁ¢∫ÊåáÂÆö‰∏ÄÂÄãÁÑ°ÈáçË§áÁöÑÊ®ôÈ†≠ÁØÑÂúç„ÄÇ",
        invalidHeaders: "Êâæ‰∏çÂà∞‰æÜÊ∫êÂ∑•‰ΩúË°®‰ª•‰∏ãÊ®ôÈ†≠Ôºö{HEADERS}„ÄÇ",
        invalidKeywords: "Âú®Ê®ôÈ†≠ '{HEADER}' ‰∏ãÊâæ‰∏çÂà∞‰ª•‰∏ãÈóúÈçµÂ≠óÔºö{KEYWORDS}„ÄÇ",
        errorDialogTitle: 'ÈåØË™§',
        cleanupError: 'Ê∏ÖÁêÜÈÅéÁ®ã‰∏≠ÁôºÁîüÈåØË™§Ôºö{MESSAGE}',
        sumVerificationError: 'Á∏ΩÂíåÈ©óË≠âÈÅéÁ®ã‰∏≠ÁôºÁîüÈåØË™§Ôºö{MESSAGE}',
        sheetNotFound: 'Êâæ‰∏çÂà∞ÂêçÁÇ∫„Äå{SHEET_NAME}„ÄçÁöÑÂ∑•‰ΩúË°®„ÄÇ',
        requiredMismatch: "ÂøÖË¶Å {FIELDS}_Mismatch",
        noDataTitle: "ÁÑ°Ë≥áÊñôÂèØËôïÁêÜ",
        noDataBody: "ÁõÆÊ®ôÂ∑•‰ΩúË°®‰∏≠Ê≤íÊúâÊâæÂà∞‰ªª‰ΩïË≥áÊñôÂàóÂèØ‰æõÈ©óË≠â„ÄÇ\n\nPlease ensure there is data below the configured \"Data Start Row\".",
        noProcessableRowsTitle: "Êâæ‰∏çÂà∞ÂèØËôïÁêÜÁöÑË≥áÊñôÂàó",
        noProcessableRowsBody: "Âú®ÁõÆÊ®ôÂ∑•‰ΩúË°®‰∏≠ÔºåÊâæ‰∏çÂà∞‰ªª‰ΩïÂåÖÂê´„Äå‰∏ªË¶ÅÈçµ„Äç{KEY_NAME_DISPLAY}ÁöÑË≥áÊñôÂàóÂèØ‰æõËôïÁêÜ„ÄÇ\n\nË´ãÊ™¢Êü•Ôºö\n1. ÊÇ®Ë®≠ÂÆöÁÇ∫ÂøÖË¶Å(Y)ÁöÑÊ¨Ñ‰Ωç‰∏≠ÊòØÂê¶Â∑≤Â°´ÂÖ•Ë≥áÊñô„ÄÇ\n2. „Äå‰æÜÊ∫êÊ¨Ñ‰ΩçÈ©óË≠âÊ¢ù‰ª∂„Äç‰∏≠ÊòØÂê¶ÊúâËá≥Â∞ë‰∏ÄÈ†ÖË¢´Ë®≠ÁÇ∫ÂøÖË¶Å(Y)„ÄÇ",
        noSourceDataSuffix: '_ÁÑ°‰æÜÊ∫êË≥áÊñô',
        perfectMatch: 'ÂåπÈÖçÊàêÂäü',
        matchFailedLabel: 'ÂåπÈÖçÂ§±Êïó (Failed Matches)',
        unmatchedTarget: '‰∏çÂåπÈÖçÁöÑÁõÆÊ®ôÊ¨Ñ‰Ωç',
        unmatchedSource: '‰∏çÂåπÈÖçÁöÑ‰æÜÊ∫êÊ¨Ñ‰Ωç',
        mappingSuccessFormat: 'ÂåπÈÖç (Match)',
        mappingFailureFormat: '‰∏çÂåπÈÖç (Not Match)',
        exampleTargetSheet: 'ÁõÆÊ®ôË≥áÊñôË°® (ÁîüÁî¢Ë£ΩÈÄ†)',
        exampleImportSourceSheet: '‰æÜÊ∫ê_ÂåØÂÖ• (ÁîüÁî¢Ë£ΩÈÄ†)',
        exampleVerifySourceSheet: '‰æÜÊ∫ê_È©óË≠â (ÁîüÁî¢Ë£ΩÈÄ†)',
        exampleCompareSourceSheet: '‰æÜÊ∫ê_ÊØîÂ∞ç (ÁîüÁî¢Ë£ΩÈÄ†)',
        exampleDashboardSheet_Sales: 'ÊúàÂ†±ÂàÜÊûêÂÑÄË°®Êùø (Ê•≠ÂãôÁµ±Ë®à)',
        exampleSalesLogSheet_Sales: '[‰æÜÊ∫ê] Èä∑ÂîÆÁ¥ÄÈåÑ',
        exampleCustomerMasterSheet_Sales: '[‰æÜÊ∫ê] ÂÆ¢Êà∂‰∏ªÊ™î',
        exampleProductTargetsSheet_Sales: '[‰æÜÊ∫ê] Áî¢ÂìÅÁõÆÊ®ô',
        exampleGenerationConfirmBody: 'Ê≠§Êìç‰ΩúÂ∞áÊúÉÂú®ÁõÆÂâçÁöÑÊ™îÊ°à‰∏≠Êñ∞Â¢û‰∏âÂÄãÂ∑•‰ΩúÂàÜÈ†ÅÔºå‰∏¶Â•óÁî®ÁØÑ‰æãË≥áÊñôËàáÊ†ºÂºè„ÄÇ\n\nÂ¶ÇÊûúÂ∑≤Â≠òÂú®ÂêåÂêçÂàÜÈ†ÅÔºåÂÖ∂ÂÖßÂÆπÂ∞áÊúÉË¢´„ÄêË¶ÜËìã„Äë„ÄÇ\n\nÊÇ®Á¢∫ÂÆöË¶ÅÁπºÁ∫åÂóéÔºü\n\n Ëã•ÊÇ®‰∏çÊÉ≥Ë¶ÜËìãÁï∂ÂâçÁöÑÂàÜÈ†ÅË´ãÊåâÂê¶ÔºåÂ∞áÊúÉÁπºÁ∫åÈñãÂïüÂÅ¥ÈÇäÊ¨ÑÂºïÂ∞éÊïôÂ≠∏„ÄÇ',
        generatingExampleProcess: 'ËôïÁêÜ‰∏≠',
        generatingExampleBody: 'Ê≠£Âú®ÁîüÊàêÁØÑ‰æãÔºåË´ãÁ®çÂÄô...',
        generationSuccessTitle: 'ÂÆåÊàê',
        generationSuccessBody: 'ÁîüÁî¢Ë£ΩÈÄ†ÁØÑ‰æãÂ∑≤ÊàêÂäüÁîüÊàêÔºÅ',
        generationSuccessBodySales: 'Ê•≠ÂãôÁµ±Ë®àÁØÑ‰æãÂ∑≤ÊàêÂäüÁîüÊàêÔºÅ',
        operationCancelled: 'Â∑≤ÂèñÊ∂àÊìç‰Ωú„ÄÇ',
        deleteExamplesItem: 'üóëÔ∏è Âà™Èô§ÁØÑ‰æãÂàÜÈ†Å',
        deleteExampleConfirmTitle: 'Á¢∫Ë™çÂà™Èô§',
        deleteExampleConfirmBody: 'Ê≠§Êìç‰ΩúÂ∞áÊ∞∏‰πÖÂà™Èô§‰ª•‰∏ãÁØÑ‰æãÂàÜÈ†ÅÔºö\n\n{SHEET_LIST}\n\nÊÇ®Á¢∫ÂÆöË¶ÅÁπºÁ∫åÂóéÔºü',
        noExampleSheetsFound: 'Êâæ‰∏çÂà∞ÂèØÂà™Èô§ÁöÑÁØÑ‰æãÂàÜÈ†Å„ÄÇ',
        deleteExampleSuccess: 'ÁØÑ‰æãÂàÜÈ†ÅÂ∑≤ÊàêÂäüÂà™Èô§„ÄÇ',
        // Sales Example Data
        productLaptop: 'È´òÊïàËÉΩÁ≠ÜÈõª',
        productKeyboard: 'ÁÑ°Á∑öÊ©üÊ¢∞ÈçµÁõ§',
        productMonitor: '27Âêã4KÈ°ØÁ§∫Âô®',
        productMouse: 'ÁÑ°Á∑öÊªëÈº†',
        customerA: 'ÁßëÊäÄÂ∑®‰∫∫ËÇ°‰ªΩÊúâÈôêÂÖ¨Âè∏',
        customerB: 'ÂâµÊñ∞Ë®≠Ë®àÂ∑•‰ΩúÂÆ§',
        customerC: 'Áí∞ÁêÉË≤øÊòìÊúâÈôêÂÖ¨Âè∏',
        customerD: 'Êï∏‰ΩçÊΩÆÊµÅÂúãÈöõ',
        customerE: 'ÂçìË∂äË£ΩÈÄ†Â∑•Ê•≠',
        regionNorth: 'ÂåóÈÉ®',
        regionCentral: '‰∏≠ÈÉ®',
        regionSouth: 'ÂçóÈÉ®',
        // Sales Example Headers
        headerOrderDate: 'Ë®ÇÂñÆÊó•Êúü',
        headerCustomerID: 'ÂÆ¢Êà∂ID',
        headerCustomerName: 'ÂÆ¢Êà∂ÂÖ®Âêç',
        headerRegion: 'ÊâÄÂ±¨Âú∞ÂçÄ',
        headerSalesperson: 'Ë≤†Ë≤¨Ê•≠ÂãôÂì°',
        headerProductName: 'Áî¢ÂìÅÂêçÁ®±',
        headerTotalSales: 'Á∏ΩÈä∑ÂîÆÈ°ç',
        headerMonthlyTarget: 'ÁõÆÊ®ôÊúàÈä∑ÂîÆÈ°ç',
        headerAchievementRate: 'Ê•≠Á∏æÈÅîÊàêÁéá',
        headerQuantity: 'Êï∞Èáè',
        headerUnitPrice: 'ÂñÆÂÉπ',
        headerQuantity: 'Êï∏Èáè',
        headerUnitPrice: 'ÂñÆÂÉπ',
        // Error Messages
        errorNoImportSettingsFound: 'Êâæ‰∏çÂà∞Â∑•‰ΩúË°® "{SHEET_NAME}" ÁöÑË≥áÊñôÂåØÂÖ•Ë®≠ÂÆöÔºåË´ãÂÖàË®≠ÂÆö„ÄÇ',
        compareFailedTitle: 'Ë≥áÊñôÊØîÂ∞çÂ§±Êïó',
        errorNoCompareSettingsFound: 'Êâæ‰∏çÂà∞Ê≠§Â∑•‰ΩúË°®ÁöÑË≥áÊñôÊØîÂ∞çË®≠ÂÆö„ÄÇË´ãÂÖàÈÄèÈÅé„ÄåË≥áÊñôÂåØÂÖ•Â∑•ÂÖ∑ > Ë≥áÊñôÊØîÂ∞çË®≠ÂÆö„ÄçÈÄ≤Ë°åË®≠ÂÆö„ÄÇ',
        // --- Report Generator ---
        reportSettingsTitle: 'Ë≥áÊñôÁîüÊàêÂ†±Ë°®Ë®≠ÂÆö',
        sourceUrlPlaceholder: "Ëã•ÁÇ∫Â§ñÈÉ®Ê™îÊ°àË´ãË≤º‰∏ä URLÔºåÂê¶ÂâáÁïôÁ©∫",
        exportReportButton: "ÂåØÂá∫Â†±Ë°®",
        cancelButton: "ÂèñÊ∂à",
        confirmExportButton: "Á¢∫Ë™çÂåØÂá∫",
        loadingMessage: "ËÆÄÂèñ‰∏≠...",
        generatingMessage: "ÁîüÊàê‰∏≠...",
        exportingMessage: "Â†±Ë°®ÂåØÂá∫‰∏≠ÔºåË´ãÁ®çÂÄô...",
        exportSuccess: "ÂåØÂá∫ÊàêÂäüÔºÅ",
        exportFailure: "ÂåØÂá∫Â§±Êïó",
        exportSuccessSheet: "Â†±Ë°®Â∑≤ÊàêÂäüÂåØÂá∫ÔºÅÊÇ®ÂèØ‰ª•Âú®Ë©¶ÁÆóË°®‰∏≠ÂêçÁÇ∫„Äå{SHEET_NAME}„ÄçÁöÑÊñ∞ÂàÜÈ†ÅÊâæÂà∞ÂÆÉ„ÄÇ",
        exportSuccessLink: "Â†±Ë°®Â∑≤ÊàêÂäüÂåØÂá∫ÔºÅÈªûÊ≠§ÊâìÈñãÊñá‰ª∂Ôºö",
        backendValidationError: "ÂæåÁ´ØÈ©óË≠âÈåØË™§",
        analysisError: "ÂàÜÊûêÈåØË™§",
        executionError: "Âü∑Ë°åÈåØË™§",
        errorMissingSheetName: "Áº∫Â∞ëÂ∑•‰ΩúË°®ÂêçÁ®±ÔºåÁÑ°Ê≥ïÂÑ≤Â≠òË®≠ÂÆö„ÄÇ",
        errorSheetNotFound: "Âú®ÊåáÂÆöÁöÑË©¶ÁÆóË°®‰∏≠Êâæ‰∏çÂà∞ÂêçÁÇ∫„Äå{SHEET_NAME}„ÄçÁöÑÂ∑•‰ΩúË°®„ÄÇ",
        errorInvalidRange: "ÁÑ°ÊïàÁöÑÁØÑÂúç„Äå{RANGE}„Äç„ÄÇË´ãÊ™¢Êü•ÊÇ®ÁöÑËº∏ÂÖ•„ÄÇ",
        errorAccessUrl: "ÁÑ°Ê≥ïÂ≠òÂèñÊèê‰æõÁöÑ URL„ÄÇË´ãÊ™¢Êü•Á∂≤ÂùÄ‰∏¶Á¢∫Ë™çÊÇ®ÊúâÊ¨äÈôê„ÄÇ",
        errorNoHeaders: "Âú®ÊåáÂÆöÁöÑÁØÑÂúç {RANGE} ‰∏≠Êâæ‰∏çÂà∞‰ªª‰ΩïÊ®ôÈ†≠Ë≥áÊñô„ÄÇË´ãÊ™¢Êü•ÊÇ®ÁöÑË≥áÊñôÁØÑÂúçÊòØÂê¶Ê≠£Á¢∫Ôºå‰∏îÁ¨¨‰∏ÄË°åÂåÖÂê´Ê¨Ñ‰ΩçÂêçÁß∞„ÄÇ",
        errorNoAnalysisFields: "Ë´ãË®≠ÂÆöËá≥Â∞ë‰∏ÄÂÄãÂàÜÊûêÊ¨Ñ‰Ωç„ÄÇ",
        errorNoDimensions: "Ë´ãË®≠ÂÆöËá≥Â∞ë‰∏ÄÂÄã„ÄåÁ∂≠Â∫¶„Äç„ÄÇ",
        errorNoMetrics: "Ë´ãË®≠ÂÆöËá≥Â∞ë‰∏ÄÂÄã„ÄåÊåáÊ®ô„Äç„ÄÇ",
        errorUnsupportedFormat: "‰∏çÊîØÊè¥ÁöÑÂåØÂá∫Ê†ºÂºè„ÄÇ",
        errorExportContent: "Ë´ãÈÅ∏ÊìáË¶ÅÂåØÂá∫ÁöÑÂÖßÂÆπ",
        dataSourceTitle: "Ë≥áÊñô‰æÜÊ∫ê",
        fieldMappingTitle: "Ê¨Ñ‰ΩçÂ∞çÊáâ",
        analysisResultsTitle: "ÂàÜÊûêÁµêÊûú",
        exportSettingsTitle: "ÂåØÂá∫Ë®≠ÂÆö",
        exportFormatTitle: "1. ÈÅ∏ÊìáÂåØÂá∫Ê†ºÂºè",
        exportContentTitle: "2. ÈÅ∏ÊìáË¶ÅÂåØÂá∫ÁöÑÂÖßÂÆπ",
        exportToSheetLabel: "Êñ∞Â¢ûËá≥ Google Sheet ÂàÜÈ†Å",
        exportToDocLabel: "ÂåØÂá∫Ëá≥ Google Êñá‰ª∂",
        exportToPdfLabel: "ÂåØÂá∫ÁÇ∫ PDF",
        addAnalysisFieldButton: "+ Êñ∞Â¢ûÂàÜÊûêÊ¨Ñ‰Ωç",
        dimensionOption: "Á∂≠Â∫¶ (ÂàÜÁµÑ‰æùÊìö)",
        metricOption: "ÊåáÊ®ô (Ë®àÁÆóÊï∏ÂÄº)",
        distributionChartTitle: "{DIMENSION} ÂàÜ‰Ωà",
        chartByTitle: "ÂúñË°®Ôºö{METRIC} by {DIMENSION}",
        kpiCardTitle: "Á∏Ω {METRIC}",
        overviewTab: "Á∏ΩË¶Ω",
        analysisTab: "{DIMENSION} ÂàÜÊûê",
        rawDataTab: "ÂéüÂßãÊï∏Êìö",
        minimizeHint: "Á∏ÆÂ∞è",
        expandHint: "Êì¥Â±ïË¶ñÁ™ó",
        pinHint: "ÈáòÈÅ∏Ë¶ñÁ™ó",
        unminimizeHint: "Â±ïÈñã",
        collapseHint: "Êî∂ÂêàË¶ñÁ™ó",
        unpinHint: "ÂèñÊ∂àÈáòÈÅ∏",
        metricWarningHint: "Ê≠§Ê¨Ñ‰ΩçÂèØËÉΩÂåÖÂê´ÈùûÊï∏ÂÄºË≥áÊñôÔºå‰∏çÈÅ©ÂêàÂÅöÁÇ∫ÊåáÊ®ô„ÄÇ",
        pieChartLegendLabel: "ÂúñË°®Ôºö{DIMENSION} ÂúìÈ§ÖÂúñ (Âúñ‰æã)",
        pieChartValuesLabel: "ÂúñË°®Ôºö{DIMENSION} ÂúìÈ§ÖÂúñ (Êï∏ÂÄº)",
        barChartLabel: "ÂúñË°®Ôºö{DIMENSION} Èï∑Ê¢ùÂúñ",
        noDataForChart: "Ê≠§Á∂≠Â∫¶Ê≤íÊúâË∂≥Â§†ÁöÑÊï∏ÊìöÂèØ‰æõÁπ™Âúñ„ÄÇ",
        pieChart: "ÂúìÈ§ÖÂúñ",
        barChart: "Èï∑Ê¢ùÂúñ",
        valuesSuffix: " (Êï∏ÂÄº)",
    }
};

/**
 * Gets the appropriate translation object based on the user's locale.
 */
function getTranslations() {
    const locale = Session.getActiveUserLocale();
    return TRANSLATIONS[locale] || TRANSLATIONS.en;
}

/**
 * [REFACTORED] Adds all custom menus under a single "MasterDataAnalyzer" menu.
 */
function onOpen() {
    const ui = SpreadsheetApp.getUi();
    const T = getTranslations();

    const mainMenu = ui.createMenu(T.mainMenuTitle);

    // --- Sub-Menu: Data Import Tool ---
    const importSubMenu = ui.createMenu(T.importMenuTitle)
        .addItem(T.runImportItem, 'runImportProcess')
        .addItem(T.settingsItem, 'showImportSettingsSidebar')
        .addSeparator()
        .addItem(T.runCompareItem, 'runCompareProcess')
        .addItem(T.compareSettingsItem, 'showCompareSettingsSidebar')
        .addSeparator()
        .addItem(T.stopImportItem, 'requestStopImport')
        .addItem(T.resetImportItem, 'resetAllState');
    
    // --- Sub-Menu: Data Validation Tool ---
    const validationSubMenu = ui.createMenu(T.validationMenuTitle)
        .addItem(T.runMsModeItem, 'runValidationMsOnly')
        .addItem(T.verifySettingsItem, 'showVerifySettingsSidebar')
        .addSeparator()
        .addItem(T.stopValidationItem, 'requestStopValidation')
        .addSeparator()
        .addItem(T.verifySumsItem, 'verifySumAndCumulativeValues')
        .addSeparator()
        .addItem(T.cleanupItem, 'runReset'); // UPDATED to call the new reset function

    // --- Sub-Menu: Data Management Tool ---
    const monitorSubMenu = ui.createMenu(T.monitorMenuName)
        .addItem(T.enableNotifyItem, 'createOnChangeTrigger')
        .addItem(T.disableNotifyItem, 'deleteOnChangeTrigger')
        .addSeparator()
        .addItem(T.checkNowItem, 'checkAndNotifyWrapper');

    const managementSubMenu = ui.createMenu(T.manageMenuTitle)
        .addItem(T.manageSettingsItem, 'showManageSettingsSidebar')
        .addSeparator()
        .addItem(T.quickDeleteItem, 'showQuickDeleteSheetUI')
        .addSeparator()
        .addSubMenu(monitorSubMenu)
        .addSeparator()
        .addItem(T.reportSettingsItem, 'showReportSettingsDialog');

    // --- [NEW] Sub-Menu: Guides & Examples ---
    const guideSubMenu = ui.createMenu(T.guideMenuTitle)
        .addItem(T.businessGuide, 'generateBusinessExample')
        .addItem(T.manufacturingGuide, 'generateManufacturingExample')
        // .addItem(T.hrGuide, 'showHrGuide')
        .addSeparator()
        .addItem(T.startBusinessGuide, 'startBusinessTutorial')
        .addItem(T.startManufacturingGuide, 'startManufacturingTutorial')
        .addSeparator()
        .addItem(T.deleteExamplesItem, 'deleteExampleSheets');

    // --- Add all sub-menus and items to the main menu ---
    mainMenu.addSubMenu(importSubMenu);
    mainMenu.addSubMenu(validationSubMenu);
    mainMenu.addSubMenu(managementSubMenu);
    mainMenu.addSeparator();
    mainMenu.addSubMenu(guideSubMenu);
    mainMenu.addSeparator();
    mainMenu.addItem(T.privacyPolicyItem, 'showPrivacyPolicy');

    mainMenu.addToUi();
}

// function showHrGuide() { SpreadsheetApp.getUi().alert('‰∫∫Ë≥áÁÆ°ÁêÜÁØÑ‰æãÂç≥Â∞áÊé®Âá∫ÔºÅ'); }
/**
 * Shows the Privacy Policy UI.
 */
function showPrivacyPolicy() {
    const T = getTranslations();
    const htmlTemplate = HtmlService.createTemplateFromFile('PrivacyPolicy.html');
    htmlTemplate.T = T;
    const htmlOutput = htmlTemplate.evaluate().setWidth(600).setHeight(500);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, T.privacyPolicyTitle);
}


/**
 * Shows the HTML settings for Data Import.
 */
function showImportSettingsSidebar() {
    const T = getTranslations();
    const htmlTemplate = HtmlService.createTemplateFromFile('SettingsPageImport');
    htmlTemplate.T = T;
    const htmlOutput = htmlTemplate.evaluate().setWidth(450).setHeight(600);
    SpreadsheetApp.getUi().showModelessDialog(htmlOutput, T.importSettingsTitle);
}

/**
 * Shows the HTML settings for Data Comparison.
 */
function showCompareSettingsSidebar() {
    const T = getTranslations();
    const htmlTemplate = HtmlService.createTemplateFromFile('SettingsPageCompare.html'); // Ensure this file exists
    htmlTemplate.T = T;
    const htmlOutput = htmlTemplate.evaluate().setWidth(450).setHeight(600);
    SpreadsheetApp.getUi().showModelessDialog(htmlOutput, T.compareSettingsTitle);
}

/**
 * Shows the HTML settings for Report Generation.
 */
function showReportSettingsDialog() {
    const T = getTranslations();
    const htmlTemplate = HtmlService.createTemplateFromFile('SettingPageReport.html');
    htmlTemplate.T = T; // Pass translations to the HTML file
    const htmlOutput = htmlTemplate.evaluate().setWidth(500).setHeight(650);
    SpreadsheetApp.getUi().showModelessDialog(htmlOutput, T.reportSettingsTitle);
}

// =================================================================================================
// ===================================== PropertiesService Functions ===============================
// =================================================================================================

/**
 * Saves Import Settings for a specific sheet.
 * @param {object} settings The settings object from the UI.
 * @param {string} sheetName The target sheet name.
 * @returns {{success: boolean, message: string}} Result object.
 */
function saveImportSettings(settings, sheetName) {
    const T = getTranslations();
    try {
        if (!sheetName) {
            throw new Error("Sheet name is required to save settings.");
        }
        if (!settings.sourceUrl || !settings.sourceSheetName || !settings.targetSheetName) {
            throw new Error(T.errorUrlRequired);
        }

        const validationResults = validateAllInputs({
            sourceUrl: settings.sourceUrl,
            sourceSheetName: settings.sourceSheetName,
            sourceIdentifierRange: settings.sourceIdentifierRange,
            importFilterHeaders: settings.rawImportFilterHeaders,
            keywordFilters: settings.keywordFilters
        });

        let errorMessages = [];
        if (validationResults.importFilterErrors && validationResults.importFilterErrors.length > 0) {
            errorMessages.push(T.invalidHeaders.replace('{HEADERS}', validationResults.importFilterErrors.join(', ')));
        }
        if (validationResults.keywordFilterErrors && validationResults.keywordFilterErrors.length > 0) {
            validationResults.keywordFilterErrors.forEach(err => {
                if (err.invalidHeader) {
                    errorMessages.push(T.invalidHeaders.replace('{HEADERS}', err.invalidHeader));
                } else if (err.invalidKeywords) {
                    errorMessages.push(T.invalidKeywords.replace('{HEADER}', err.header).replace('{KEYWORDS}', err.invalidKeywords.join(', ')));
                }
            });
        }

        if (errorMessages.length > 0) {
            return {
                success: false,
                message: errorMessages.join('\n')
            };
        }

        const properties = PropertiesService.getDocumentProperties();
        const key = `importSettings_${sheetName}`;
        properties.setProperty(key, JSON.stringify(settings));

        return {
            success: true,
            message: T.saveSuccess
        };
    } catch (e) {
        Logger.log(`Error saving import settings for sheet ${sheetName}: ${e.message}`);
        return {
            success: false,
            message: `${T.saveFailure}: ${e.message}`
        };
    }
}

/**
 * Gets Import Settings for a specific sheet.
 * @param {string} sheetName The target sheet name.
 * @returns {object} The saved settings object.
 */
function getImportSettings(sheetName) {
    const currentSheetName = sheetName || SpreadsheetApp.getActiveSpreadsheet().getActiveSheet().getName();
    const properties = PropertiesService.getDocumentProperties();
    const key = `importSettings_${currentSheetName}`;
    const settingsString = properties.getProperty(key);

    let settings;
    if (!settingsString) {
        settings = {};
    } else {
        try {
            settings = JSON.parse(settingsString);
        } catch (e) {
            Logger.log(`Error parsing import settings for sheet ${currentSheetName}: ${e.message}`);
            settings = {};
        }
    }

    return {
        sourceUrl: settings.sourceUrl || '',
        sourceSheetName: settings.sourceSheetName || '',
        targetSheetName: settings.targetSheetName || currentSheetName,
        targetHeaderRow: settings.targetHeaderRow ? parseInt(settings.targetHeaderRow, 10) : '',
        targetStartRow: settings.targetStartRow ? parseInt(settings.targetStartRow, 10) : '',
        sourceIdentifierRange: settings.sourceIdentifierRange || '',
        sourceHeaderRange: settings.sourceHeaderRange || '',
        sourceValueMatrixRange: settings.sourceValueMatrixRange || '',
        rawImportFilterHeaders: settings.rawImportFilterHeaders || '',
        keywordFilters: settings.keywordFilters || []
    };
}


/**
 * Saves Compare Settings for a specific sheet.
 * @param {object} settings The settings object from the UI.
 * @param {string} sheetName The name of the sheet to save settings for.
 * @returns {{success: boolean, error?: string}} Result object.
 */
function saveCompareSettings(settings, sheetName) {
    try {
        if (!sheetName) {
            throw new Error("Sheet name is required to save settings.");
        }
        if (!settings.sourceUrl || !settings.sourceSheetName || !settings.targetSheetName) {
            throw new Error("Source/Target URL and Sheet Name are required.");
        }
        if (!settings.sourceCompareRange || !settings.targetLookupCol || !settings.sourceLookupCol || !settings.sourceReturnCol || !settings.targetWriteCol) {
            throw new Error("All comparison and mapping fields are required.");
        }

        const properties = PropertiesService.getDocumentProperties();
        const key = `compareSettings_${sheetName}`;
        properties.setProperty(key, JSON.stringify(settings));
        return {
            success: true
        };
    } catch (e) {
        Logger.log(`Error saving compare settings for sheet ${sheetName}: ${e.message}`);
        return {
            success: false,
            error: e.message
        };
    }
}

/**
 * Gets Compare Settings for a specific sheet.
 * @param {string} sheetName The name of the sheet to get settings for.
 * @returns {object} The comparison settings object.
 */
function getCompareSettings(sheetName) {
    const currentSheetName = sheetName || SpreadsheetApp.getActiveSpreadsheet().getActiveSheet().getName();
    const properties = PropertiesService.getDocumentProperties();
    const key = `compareSettings_${currentSheetName}`;
    const settingsString = properties.getProperty(key);

    let settings;
    if (!settingsString) {
        settings = {};
    } else {
        try {
            settings = JSON.parse(settingsString);
        } catch (e) {
            Logger.log(`Error parsing compare settings for sheet ${currentSheetName}: ${e.message}`);
            settings = {};
        }
    }

    return {
        targetSheetName: settings.targetSheetName || currentSheetName,
        sourceUrl: settings.sourceUrl || '',
        sourceSheetName: settings.sourceSheetName || '',
        targetHeaderRow: settings.targetHeaderRow ? parseInt(settings.targetHeaderRow, 10) : '',
        targetStartRow: settings.targetStartRow ? parseInt(settings.targetStartRow, 10) : '',
        sourceCompareRange: settings.sourceCompareRange || '',
        targetLookupCol: settings.targetLookupCol || '',
        sourceLookupCol: settings.sourceLookupCol || '',
        sourceReturnCol: settings.sourceReturnCol || '',
        targetWriteCol: settings.targetWriteCol || ''
    };
}

/**
 * Gets the active sheet name for the UI.
 * @returns {string} The active sheet name.
 */
function getActiveSheetName() {
    return SpreadsheetApp.getActiveSpreadsheet().getActiveSheet().getName();
}


/**
 * Shows the HTML settings for Data Validation.
 */
function showVerifySettingsSidebar() {
    const T = getTranslations();
    const htmlTemplate = HtmlService.createTemplateFromFile('SettingsPageVerify.html');
    htmlTemplate.T = T;
    const htmlOutput = htmlTemplate.evaluate().setWidth(500).setHeight(650);
    SpreadsheetApp.getUi().showModelessDialog(htmlOutput, T.verifySettingsTitle);
}

/**
 * Gets all sheet names from a given spreadsheet URL.
 * @param {string} url The URL of the spreadsheet.
 * @returns {string[]} An array of sheet names.
 */
function getSheetNames(url) {
    const T = getTranslations();
    try {
        const ss = url ? SpreadsheetApp.openByUrl(url) : SpreadsheetApp.getActiveSpreadsheet();
        const sheets = ss.getSheets();
        if (sheets.length === 0) {
            throw new Error(T.noSheetsFound);
        }
        return sheets.map(sheet => sheet.getName());
    } catch (e) {
        Logger.log(`Error in getSheetNames: ${e.message}`);
        throw new Error(T.errorInvalidUrl);
    }
}

/**
 * Gets settings for the Data Verify HTML interface.
 * This is a wrapper to call the function in the Data Verify script.
 * @param {string} sheetName The name of the sheet to get settings for.
 */
function getVerifySettingsForHtml(sheetName) {
    return getVerifySettings(sheetName);
}

/**
 * Gets default templates for notification emails.
 */
function getNotificationDefaultTemplates() {
    const T = getTranslations();
    return {
        subject: T.defaultSubjectTemplate,
        body: T.defaultBodyTemplate
    };
}

/**
 * Fetches header options for the filter dropdown.
 */
function getFilterHeaderOptions(sourceUrl, sourceSheetName, sourceIdentifierRange, importFilterHeadersString) {
    if (!sourceUrl || !sourceSheetName) return [];

    try {
        const sourceSs = SpreadsheetApp.openByUrl(sourceUrl);
        const sourceSh = sourceSs.getSheetByName(sourceSheetName);
        if (!sourceSh) return [];

        if (importFilterHeadersString) {
            if (importFilterHeadersString.includes(':') || importFilterHeadersString.includes('Ôºö')) {
                const rangeString = importFilterHeadersString.replace(/Ôºö/g, ':');
                const headers = sourceSh.getRange(rangeString).getValues()[0];
                return headers.map(h => h.toString().trim()).filter(h => h);
            } else {
                return importFilterHeadersString.split(/,|Ôºå/g).map(h => h.trim()).filter(h => h);
            }
        }

        if (sourceIdentifierRange) {
            const idRange = sourceSh.getRange(sourceIdentifierRange);
            const headerRow = idRange.getRow() - 1;
            if (headerRow < 1) return [];
            const idHeaderRange = sourceSh.getRange(headerRow, idRange.getColumn(), 1, idRange.getNumColumns());
            const headers = idHeaderRange.getValues()[0];
            return headers.map(h => h.toString().trim()).filter(h => h);
        }

        return [];
    } catch (e) {
        Logger.log(`Error in getFilterHeaderOptions: ${e.message}`);
        return [];
    }
}


/**
 * Fetches unique data values from a specified column for dependent dropdowns.
 */
function getUniqueValuesForHeader(sourceUrl, sourceSheetName, sourceIdentifierRange, headerName) {
    if (!sourceUrl || !sourceSheetName || !sourceIdentifierRange || !headerName) {
        return [];
    }
    try {
        const sourceSs = SpreadsheetApp.openByUrl(sourceUrl);
        const sourceSh = sourceSs.getSheetByName(sourceSheetName);
        if (!sourceSh) return [];

        const idRange = sourceSh.getRange(sourceIdentifierRange);
        const headerRow = idRange.getRow() - 1;
        if (headerRow < 1) return [];

        const idHeaderRange = sourceSh.getRange(headerRow, idRange.getColumn(), 1, idRange.getNumColumns());
        const headers = idHeaderRange.getValues()[0].map(h => h.toString().trim());

        const headerIndex = headers.indexOf(headerName);
        if (headerIndex === -1) {
            return [];
        }

        const columnIndex = idRange.getColumn() + headerIndex;
        const values = sourceSh.getRange(idRange.getRow(), columnIndex, idRange.getNumRows(), 1)
            .getValues()
            .flat()
            .map(v => v.toString().trim())
            .filter(v => v);

        return [...new Set(values)];
    } catch (e) {
        Logger.log(`Error in getUniqueValuesForHeader: ${e.message}`);
        return [];
    }
}

/**
 * Validates the core source and target fields.
 */
function validateSourceAndTarget(sourceUrl, sourceSheetName, targetSheetName) {
    const T = getTranslations();
    const errors = {
        sourceUrlError: '',
        sourceSheetError: '',
        targetSheetError: ''
    };

    if (targetSheetName) {
        const activeSs = SpreadsheetApp.getActiveSpreadsheet();
        if (!activeSs.getSheetByName(targetSheetName)) {
            errors.targetSheetError = T.errorTargetSheetNotFound.replace('{SHEET_NAME}', targetSheetName);
        }
    }

    if (sourceUrl) {
        const validUrlPattern = /^https:\/\/docs\.google\.com\/spreadsheets\/d\//;
        if (!validUrlPattern.test(sourceUrl)) {
            errors.sourceUrlError = T.errorInvalidUrl;
            return errors;
        }
    }

    if (sourceUrl && sourceSheetName && !errors.sourceUrlError) {
        try {
            const sourceSs = SpreadsheetApp.openByUrl(sourceUrl);
            if (!sourceSs.getSheetByName(sourceSheetName)) {
                errors.sourceSheetError = T.errorSheetNotFoundInUrl.replace('{SHEET_NAME}', sourceSheetName);
            }
        } catch (e) {
            errors.sourceUrlError = T.errorInvalidUrl;
        }
    }

    return errors;
}

/**
 * Validates the core source and target fields for the Compare UI.
 */
function validateCompareCoreInputs(sourceUrl, sourceSheetName, targetSheetName) {
    return validateSourceAndTarget(sourceUrl, sourceSheetName, targetSheetName);
}


/**
 * Validates the core source and target fields for the Verify UI.
 */
function validateVerifyInputs(sourceUrl, sourceSheetName, targetSheetName) {
    return validateSourceAndTarget(sourceUrl, sourceSheetName, targetSheetName);
}


/**
 * Validates all user inputs for the Import UI.
 */
function validateAllInputs(inputs) {
    const T = getTranslations();
    const {
        sourceUrl,
        sourceSheetName,
        sourceIdentifierRange,
        importFilterHeaders,
        keywordFilters
    } = inputs;
    const results = {
        duplicateHeaderWarning: '',
        importFilterErrors: [],
        keywordFilterErrors: []
    };

    if (!sourceUrl || !sourceSheetName) return results;

    try {
        const sourceSs = SpreadsheetApp.openByUrl(sourceUrl);
        const sourceSh = sourceSs.getSheetByName(sourceSheetName);
        if (!sourceSh) return results;

        const sourceHeaders = getFilterHeaderOptions(sourceUrl, sourceSheetName, sourceIdentifierRange, importFilterHeaders);

        if (!importFilterHeaders && sourceIdentifierRange) {
            const idRange = sourceSh.getRange(sourceIdentifierRange);
            const headerRow = idRange.getRow() - 1;
            if (headerRow > 0) {
                const rangeHeaders = sourceSh.getRange(headerRow, idRange.getColumn(), 1, idRange.getNumColumns()).getValues()[0];
                const seen = new Set();
                const duplicates = new Set();
                rangeHeaders.forEach(h => {
                    const trimmedHeader = h.toString().trim();
                    if (trimmedHeader) {
                        if (seen.has(trimmedHeader)) {
                            duplicates.add(trimmedHeader);
                        }
                        seen.add(trimmedHeader);
                    }
                });
                if (duplicates.size > 0) {
                    results.duplicateHeaderWarning = T.duplicateHeaderWarning.replace('{HEADERS}', [...duplicates].join(', '));
                }
            }
        }

        if (importFilterHeaders) {
            const allSourceHeaders = sourceSh.getDataRange().getValues().flat().map(h => h.toString().trim());
            const inputHeaders = importFilterHeaders.includes(':') ? getFilterHeaderOptions(sourceUrl, sourceSheetName, null, importFilterHeaders) : importFilterHeaders.split(/,|Ôºå/g).map(h => h.trim());
            const invalidHeaders = inputHeaders.filter(h => !allSourceHeaders.includes(h));
            if (invalidHeaders.length > 0) {
                results.importFilterErrors = invalidHeaders;
            }
        }

        if (keywordFilters && keywordFilters.length > 0) {
            keywordFilters.forEach((filter, index) => {
                if (!filter.header) return;

                if (!sourceHeaders.includes(filter.header)) {
                    results.keywordFilterErrors.push({
                        index,
                        invalidHeader: filter.header
                    });
                    return;
                }

                if (filter.keywords) {
                    const validKeywords = getUniqueValuesForHeader(sourceUrl, sourceSheetName, sourceIdentifierRange, filter.header);
                    const inputKeywords = filter.keywords.split(/,|Ôºå/g).map(k => k.trim()).filter(k => k);
                    const invalidKeywords = inputKeywords.filter(k => !validKeywords.includes(k));

                    if (invalidKeywords.length > 0) {
                        results.keywordFilterErrors.push({
                            index,
                            invalidKeywords,
                            header: filter.header
                        });
                    }
                }
            });
        }

        return results;
    } catch (e) {
        Logger.log(`Error during validation: ${e.message}`);
        return results;
    }
}

/**
 * Saves settings from the Data Verify HTML interface.
 * This is a wrapper to call the function in the Data Verify script.
 * @param {object} settings The settings object from the UI.
 * @param {string} sheetName The name of the sheet to save settings for.
 */
function saveVerifySettingsFromHtml(settings, sheetName) {
    return saveVerifySettings(settings, sheetName);
}

/**
 * Runs the auto-mapping process based on header names for a specific type.
 */
function runAutoMapping(settings) {
    const T = getTranslations();
    const sourceUrl = settings.sourceUrl || settings.sourceDataUrl;
    const sourceSheetName = settings.sourceSheetName || settings.sourceDataSheetName;
    const {
        sourceHeaderRow,
        targetSheetName,
        targetHeaderRow
    } = settings;

    if (!sourceUrl || !sourceSheetName || !sourceHeaderRow || !targetSheetName || !targetHeaderRow) {
        throw new Error("Cannot perform auto-mapping. Required settings are missing.");
    }

    const targetSs = SpreadsheetApp.getActiveSpreadsheet();
    const targetSh = targetSs.getSheetByName(targetSheetName);
    if (!targetSh) throw new Error(T.errorTargetSheetNotFound.replace('{SHEET_NAME}', targetSheetName));
    let targetHeaders;
    try {
        targetHeaders = targetSh.getRange(targetHeaderRow, 1, 1, targetSh.getMaxColumns()).getValues()[0];
    } catch (e) {
        throw new Error(T.errorInvalidHeaderRow.replace('{ROW_NUM}', targetHeaderRow));
    }

    let sourceSh;
    try {
        const sourceSs = SpreadsheetApp.openByUrl(sourceUrl);
        sourceSh = sourceSs.getSheetByName(sourceSheetName);
        if (!sourceSh) throw new Error(T.errorSheetNotFoundInUrl.replace('{SHEET_NAME}', sourceSheetName));
    } catch (e) {
        throw new Error(T.errorInvalidUrl);
    }
    let sourceHeaders;
    try {
        sourceHeaders = sourceSh.getRange(sourceHeaderRow, 1, 1, sourceSh.getMaxColumns()).getValues()[0];
    } catch (e) {
        throw new Error(T.errorInvalidHeaderRow.replace('{ROW_NUM}', sourceHeaderRow));
    }

    const targetHeaderMap = new Map();
    targetHeaders.forEach((h, i) => {
        const header = h.toString().trim().normalize('NFC');
        if (header) targetHeaderMap.set(header, i + 1);
    });

    const sourceHeaderMap = new Map();
    sourceHeaders.forEach((h, i) => {
        const header = h.toString().trim().normalize('NFC');
        if (header) sourceHeaderMap.set(header, i + 1);
    });

    const mappings = [];
    targetHeaderMap.forEach((targetColIndex, header) => {
        if (sourceHeaderMap.has(header)) {
            const sourceColIndex = sourceHeaderMap.get(header);
            mappings.push({
                targetCol: columnToLetter(targetColIndex),
                sourceCol: columnToLetter(sourceColIndex)
            });
        }
    });

    return mappings;
}


// =================================================================================================
// ===================================== SECTION 2: CORE LOGIC =====================================
// =================================================================================================

/**
 * Validates the source comparison column for empty or duplicate values.
 * @param {object} settings The comparison settings.
 * @returns {{isValid: boolean, message: string}} An object containing the validation result.
 */
function checkSourceCompareField(settings) {
    const {
        sourceUrl,
        sourceSheetName,
        sourceCompareRange,
        sourceLookupCol
    } = settings;
    const T = getTranslations();

    if (!sourceUrl || !sourceSheetName || !sourceCompareRange || !sourceLookupCol) {
        return {
            isValid: false,
            message: "Ë´ãÂÖàÂ°´ÂØ´‰æÜÊ∫ê URL„ÄÅÂàÜÈ†Å„ÄÅÊØîÂ∞çÁØÑÂúçËàáÊØîÂ∞çÊ¨Ñ‰Ωç„ÄÇ"
        };
    }

    try {
        const sourceSs = SpreadsheetApp.openByUrl(sourceUrl);
        const sourceSheet = sourceSs.getSheetByName(sourceSheetName);
        if (!sourceSheet) {
            return {
                isValid: false,
                message: T.errorSheetNotFoundInUrl.replace('{SHEET_NAME}', sourceSheetName)
            };
        }

        const sourceRange = sourceSheet.getRange(sourceCompareRange);
        const sourceData = sourceRange.getValues();
        const lookupColNum = letterToColumn(sourceLookupCol);

        if (lookupColNum < sourceRange.getColumn() || lookupColNum >= (sourceRange.getColumn() + sourceRange.getNumColumns())) {
            const errorMessage = T.sourceCompareFieldCheckError
                .replace('{COLUMN}', sourceLookupCol)
                .replace('{RANGE}', sourceCompareRange);
            return {
                isValid: false,
                message: errorMessage
            };
        }

        const lookupColIndex = lookupColNum - sourceRange.getColumn();

        const valuesSeen = new Map();
        const duplicates = new Map();
        const emptyRows = [];

        sourceData.forEach((row, index) => {
            const key = row[lookupColIndex];
            const a1NotationRow = sourceRange.getRow() + index;

            if (key === null || key === "") {
                emptyRows.push(a1NotationRow);
            } else {
                const keyStr = key.toString().trim();
                if (valuesSeen.has(keyStr)) {
                    if (!duplicates.has(keyStr)) {
                        duplicates.set(keyStr, [valuesSeen.get(keyStr)]);
                    }
                    duplicates.get(keyStr).push(a1NotationRow);
                } else {
                    valuesSeen.set(keyStr, a1NotationRow);
                }
            }
        });

        let messages = [];
        if (emptyRows.length > 0) {
            messages.push(T.emptyRowsFound.replace('{ROWS}', emptyRows.join(', ')));
        }
        if (duplicates.size > 0) {
            let duplicateMessages = [];
            duplicates.forEach((rows, value) => {
                duplicateMessages.push(T.duplicateValuesFound.replace('{VALUE}', value).replace('{ROWS}', rows.sort((a, b) => a - b).join(', ')));
            });
            messages.push(T.multipleDuplicateValuesFound.replace('{DETAILS}', duplicateMessages.join('; ')));
        }

        if (messages.length > 0) {
            return {
                isValid: false,
                message: messages.join('\n')
            };
        }

        return {
            isValid: true,
            message: T.checkSuccess
        };

    } catch (e) {
        Logger.log(`Error in checkSourceCompareField: ${e.message}`);
        return {
            isValid: false,
            message: `Ê™¢Êü•ÊôÇÁôºÁîüÈåØË™§: ${e.message}`
        };
    }
}


/**
 * Validates the target lookup column for empty or duplicate values.
 * @param {object} settings The comparison settings.
 * @returns {{isValid: boolean, message: string}} An object containing the validation result.
 */
function checkTargetLookupField(settings) {
    const {
        targetSheetName,
        targetStartRow,
        targetLookupCol
    } = settings;
    const T = getTranslations();

    if (!targetSheetName || !targetStartRow || !targetLookupCol) {
        return {
            isValid: false,
            message: "Ë´ãÂÖàÂ°´ÂØ´ÁõÆÊ®ôÂàÜÈ†Å„ÄÅËµ∑ÂßãÂàóËàáÊü•ÊâæÊ¨Ñ‰Ωç„ÄÇ"
        };
    }

    try {
        const targetSs = SpreadsheetApp.getActiveSpreadsheet();
        const targetSheet = targetSs.getSheetByName(targetSheetName);
        if (!targetSheet) {
            return {
                isValid: false,
                message: T.errorTargetSheetNotFound.replace('{SHEET_NAME}', targetSheetName)
            };
        }

        const startRow = parseInt(targetStartRow, 10);
        const lastRow = targetSheet.getLastRow();

        if (lastRow < startRow) {
            return {
                isValid: true,
                message: "ÁõÆÊ®ôÊ¨Ñ‰ΩçÁÑ°Ë≥áÊñôÂèØÊ™¢Êü•„ÄÇ"
            }; // Not an error, just empty.
        }

        const lookupColNum = letterToColumn(targetLookupCol);
        const range = targetSheet.getRange(startRow, lookupColNum, lastRow - startRow + 1, 1);
        const data = range.getValues();

        const valuesSeen = new Map();
        const duplicates = new Map();
        const emptyRows = [];

        data.forEach((row, index) => {
            const key = row[0];
            const a1NotationRow = startRow + index;

            if (key === null || key === "") {
                emptyRows.push(a1NotationRow);
            } else {
                const keyStr = key.toString().trim();
                if (valuesSeen.has(keyStr)) {
                    if (!duplicates.has(keyStr)) {
                        duplicates.set(keyStr, [valuesSeen.get(keyStr)]);
                    }
                    duplicates.get(keyStr).push(a1NotationRow);
                } else {
                    valuesSeen.set(keyStr, a1NotationRow);
                }
            }
        });

        let messages = [];
        if (emptyRows.length > 0) {
            messages.push(T.emptyRowsFound.replace('{ROWS}', emptyRows.join(', ')));
        }
        if (duplicates.size > 0) {
            let duplicateMessages = [];
            duplicates.forEach((rows, value) => {
                duplicateMessages.push(T.duplicateValuesFound.replace('{VALUE}', value).replace('{ROWS}', rows.sort((a, b) => a - b).join(', ')));
            });
            messages.push(T.multipleDuplicateValuesFound.replace('{DETAILS}', duplicateMessages.join('; ')));
        }

        if (messages.length > 0) {
            return {
                isValid: false,
                message: messages.join('\n')
            };
        }

        return {
            isValid: true,
            message: T.checkSuccess
        };

    } catch (e) {
        Logger.log(`Error in checkTargetLookupField: ${e.message}`);
        const errorMessage = T.targetLookupFieldCheckError.replace('{COLUMN}', targetLookupCol);
        return {
            isValid: false,
            message: `${errorMessage}\nË©≥Á¥∞ÈåØË™§: ${e.message}`
        };
    }
}


function requestStopImport() {
    PropertiesService.getScriptProperties().setProperty('stopImportRequested', 'true');
    SpreadsheetApp.getActiveSpreadsheet().toast('Stop request sent. The script will stop after finishing the current item.', 'Info', 5);
}

function requestStopValidation() {
    PropertiesService.getScriptProperties().setProperty('stopValidationRequested', 'true');
    SpreadsheetApp.getActiveSpreadsheet().toast('Stop request sent. The script will stop after finishing the current item.', 'Info', 5);
}

function resetAllState() {
    const ui = SpreadsheetApp.getUi();
    const scriptProperties = PropertiesService.getScriptProperties();
    try {
        scriptProperties.deleteProperty('lastCompletedAllocationKey');
        const activeSheetName = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet().getName();
        const settings = getSettings(activeSheetName).importSettings;
        clearTargetSheetData(settings);
        SpreadsheetApp.flush();
        SpreadsheetApp.getActiveSpreadsheet().toast('Reset complete! All progress and sheet data have been cleared.', 'Success', 5);
    } catch (e) {
        Logger.log(`Reset failed: ${e.message}`);
        ui.alert('Reset Failed', e.message, ui.ButtonSet.OK);
    }
}

/**
 * Main function to run the data comparison process.
 */
function runCompareProcess() {
    const ui = SpreadsheetApp.getUi();
    const activeSheetName = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet().getName();
    const T = getTranslations();
    try {
        const settings = getCompareSettings(activeSheetName);
        if (!settings || Object.keys(settings).length <= 1 || !settings.sourceUrl) {
            throw new Error(T.errorNoCompareSettingsFound);
        }

        // --- Pre-flight check for SOURCE ---
        const sourceValidation = checkSourceCompareField(settings);
        if (!sourceValidation.isValid) {
            const confirmationMessage = T.preCheckWarningBody
                .replace('{COLUMN}', settings.sourceLookupCol)
                .replace('{MESSAGE}', sourceValidation.message);
            const response = ui.alert(T.preCheckWarningTitle, confirmationMessage, ui.ButtonSet.YES_NO);
            if (response !== ui.Button.YES) {
                SpreadsheetApp.getActiveSpreadsheet().toast(T.preCheckCancelled, 'Cancelled', 5);
                return;
            }
        }

        // --- Pre-flight check for TARGET ---
        const targetValidation = checkTargetLookupField(settings);
        if (!targetValidation.isValid) {
            const confirmationMessage = T.preCheckWarningBodyTarget
                .replace('{COLUMN}', settings.targetLookupCol)
                .replace('{MESSAGE}', targetValidation.message);
            const response = ui.alert(T.preCheckWarningTitle, confirmationMessage, ui.ButtonSet.YES_NO);
            if (response !== ui.Button.YES) {
                SpreadsheetApp.getActiveSpreadsheet().toast(T.preCheckCancelled, 'Cancelled', 5);
                return;
            }
        }

        SpreadsheetApp.getActiveSpreadsheet().toast('ÈñãÂßãÂü∑Ë°åË≥áÊñôÊØîÂ∞ç...', 'ËôïÁêÜ‰∏≠', 10);

        const targetSs = SpreadsheetApp.getActiveSpreadsheet();
        const targetSsId = targetSs.getId(); // Get target ID
        const targetSheet = targetSs.getSheetByName(settings.targetSheetName);
        if (!targetSheet) throw new Error(`Êâæ‰∏çÂà∞ÁõÆÊ®ôÂàÜÈ†Å: ${settings.targetSheetName}`);

        const sourceSs = SpreadsheetApp.openByUrl(settings.sourceUrl);
        const sourceSsId = sourceSs.getId(); // Get source ID
        // *** FIX: Corrected a syntax error in the following line ***
        const sourceSheet = sourceSs.getSheetByName(settings.sourceSheetName);
        if (!sourceSheet) throw new Error(`Âú®‰æÜÊ∫êÊ™îÊ°à‰∏≠Êâæ‰∏çÂà∞ÂàÜÈ†Å: ${settings.sourceSheetName}`);

        const sourceGid = sourceSheet.getSheetId();
        const sourceUrlForLink = sourceSs.getUrl().replace('/edit', '');

        const sourceRange = sourceSheet.getRange(settings.sourceCompareRange);
        const sourceData = sourceRange.getValues();
        const lookupColIndex = letterToColumn(settings.sourceLookupCol) - sourceRange.getColumn();
        const returnColIndex = letterToColumn(settings.sourceReturnCol) - sourceRange.getColumn();

        if (lookupColIndex < 0 || returnColIndex < 0 || lookupColIndex >= sourceRange.getNumColumns() || returnColIndex >= sourceRange.getNumColumns()) {
            throw new Error("‰æÜÊ∫êÊØîÂ∞çÊ¨Ñ‰ΩçÊàñËøîÂõûÊ¨Ñ‰Ωç‰∏çÂú®ÊåáÂÆöÁöÑÊØîÂ∞çÁØÑÂúçÂÖß„ÄÇ");
        }

        const lookupMap = new Map();
        sourceData.forEach((row, index) => {
            const key = row[lookupColIndex];
            if (key !== null && key !== "") {
                lookupMap.set(key.toString().trim(), {
                    value: row[returnColIndex],
                    sourceRowIndex: index
                });
            }
        });

        const targetStartRow = settings.targetStartRow;
        const lastRow = targetSheet.getLastRow();
        if (lastRow < targetStartRow) {
            SpreadsheetApp.getActiveSpreadsheet().toast('ÁõÆÊ®ôÂàÜÈ†ÅÊ≤íÊúâÈúÄË¶ÅÊØîÂ∞çÁöÑË≥áÊñô„ÄÇ', 'ÊèêÁ§∫', 5);
            return;
        }

        const targetLookupColNum = letterToColumn(settings.targetLookupCol);
        const targetWriteColNum = letterToColumn(settings.targetWriteCol);

        const targetLookupRange = targetSheet.getRange(targetStartRow, targetLookupColNum, lastRow - targetStartRow + 1, 1);
        const targetLookupValues = targetLookupRange.getValues();

        const resultsToWrite = [];
        const richTextTasks = [];

        targetLookupValues.forEach((row, index) => {
            const lookupValue = row[0];
            if (lookupValue !== null && lookupValue !== "") {
                const lookupKey = lookupValue.toString().trim();
                if (lookupMap.has(lookupKey)) {
                    const result = lookupMap.get(lookupKey);
                    const foundValue = result.value;

                    if (foundValue === null || foundValue === "") {
                        const sourceRowForDisplay = sourceRange.getRow() + result.sourceRowIndex;
                        const sourceColLetterForDisplay = settings.sourceReturnCol;
                        const displayText = `${sourceColLetterForDisplay}${sourceRowForDisplay}${T.noSourceDataSuffix}`;

                        resultsToWrite.push([displayText]);
                        richTextTasks.push({
                            targetRow: targetStartRow + index,
                            targetCol: targetWriteColNum,
                            sourceRow: sourceRowForDisplay,
                            sourceColLetter: sourceColLetterForDisplay
                        });
                    } else {
                        resultsToWrite.push([foundValue]);
                    }
                } else {
                    resultsToWrite.push([""]);
                }
            } else {
                resultsToWrite.push([""]);
            }
        });

        if (resultsToWrite.length > 0) {
            targetSheet.getRange(targetStartRow, targetWriteColNum, resultsToWrite.length, 1).setValues(resultsToWrite);

            // Logic to create internal or external links
           const isInternalLink = (targetSsId === sourceSsId);
           richTextTasks.forEach(task => {
            const cell = targetSheet.getRange(task.targetRow, task.targetCol);
            const linkFragment = `#gid=${sourceGid}&range=${task.sourceColLetter}${task.sourceRow}`;
            const linkUrl = isInternalLink ? linkFragment : `${sourceUrlForLink}${linkFragment}`;
            const newText = cell.getValue();
            if (typeof newText === 'string' && newText.includes(T.noSourceDataSuffix)) {
            const richText = SpreadsheetApp.newRichTextValue()
                .setText(newText)
                .setLinkUrl(0, newText.length, linkUrl)
                .build();
            cell.setRichTextValue(richText);
                }
           });

            SpreadsheetApp.getActiveSpreadsheet().toast(`Ë≥áÊñôÊØîÂ∞çÂÆåÊàêÔºÅÂ∑≤Êõ¥Êñ∞ ${resultsToWrite.length} Á≠ÜË≥áÊñô„ÄÇ`, 'ÊàêÂäü', 5);
        } else {
            SpreadsheetApp.getActiveSpreadsheet().toast('Ê≤íÊúâÊâæÂà∞‰ªª‰ΩïÂèØÊØîÂ∞çÁöÑË≥áÊñô„ÄÇ', 'ÊèêÁ§∫', 5);
        }

    } catch (e) {
        Logger.log(`Data comparison failed: ${e.stack}`);
        ui.alert(T.compareFailedTitle, e.message, ui.ButtonSet.OK);
    }
}


function runImportProcess() {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const targetSsId = ss.getId(); // Get target ID
    const activeSheetName = ss.getActiveSheet().getName();
    const ui = SpreadsheetApp.getUi();
    const scriptProperties = PropertiesService.getScriptProperties();
    const T = getTranslations();

    scriptProperties.deleteProperty('stopImportRequested');

    try {
        const allSettings = getSettings(activeSheetName);
        const settings = allSettings.importSettings;

        if (!settings || !settings.sourceUrl) {
            throw new Error(T.errorNoImportSettingsFound.replace('{SHEET_NAME}', activeSheetName));
        }

        if (settings.importFilterHeaders && settings.importFilterHeaders.length > 0) {
            const sourceSheet = SpreadsheetApp.openByUrl(settings.sourceUrl).getSheetByName(settings.sourceSheetName);
            const range = sourceSheet.getRange(settings.sourceIdentifierRange);
            const rangeHeaders = sourceSheet.getRange(range.getRow() - 1, range.getColumn(), 1, range.getNumColumns()).getValues()[0].map(h => h.toString().trim());
            const filterHeaders = settings.importFilterHeaders;
            const rangeHeadersSorted = JSON.stringify([...rangeHeaders].sort());
            const filterHeadersSorted = JSON.stringify([...filterHeaders].sort());

            if (rangeHeadersSorted !== filterHeadersSorted) {
                let body = T.asymmetryWarningBody
                    .replace('{RANGE_HEADERS}', rangeHeaders.join(', '))
                    .replace('{FILTER_HEADERS}', filterHeaders.join(', '));
                const response = ui.alert(T.asymmetryWarningTitle, body, ui.ButtonSet.YES_NO);
                if (response !== ui.Button.YES) {
                    ss.toast(T.importCancelled, 'Cancelled', 5);
                    return;
                }
            }
        }

        const warningMessages = [];
        const filters = settings.keywordFilters || [];
        const incompleteFilter = filters.some(f => f.header && !f.keywords);
        if (incompleteFilter) {
            warningMessages.push(T.preflightFilterWarning);
        }

        if (warningMessages.length > 0) {
            const prompt = `${T.preflightWarning}\n\n${warningMessages.join('\n')}\n\n${T.preflightSuggestion}\n\n${T.preflightConfirmation}`;
            const response = ui.alert(T.preflightTitle, prompt, ui.ButtonSet.YES_NO);
            if (response !== ui.Button.YES) {
                ss.toast(T.importCancelled, 'Cancelled', 5);
                return;
            }
        }

        if (settings.targetHeaderRow >= settings.targetStartRow) {
            throw new Error(T.headerLessThanStartError);
        }

        if (!settings.sourceUrl || !settings.sourceUrl.startsWith('http')) {
            throw new Error("The 'Source Sheet URL' is empty or has an invalid format in the Settings sheet.");
        }

        const targetSheet = ss.getSheetByName(settings.targetSheetName);
        if (!targetSheet) {
            throw new Error(`Target sheet named "${settings.targetSheetName}" not found.`);
        }

        const isFlatteningMode = !!(settings.sourceHeaderRange && settings.sourceValueMatrixRange);
        const modeMessage = isFlatteningMode ? "Data Flattening Mode" : "Direct Import Mode";
        ss.toast(`Reading source data in ${modeMessage}...`, 'Processing', 5);

        const {
            allTasks,
            sourceInfo,
            hasSourceData
        } = buildFullTaskList(settings, targetSheet, isFlatteningMode);

        if (!hasSourceData) {
            ss.toast('No data to import in the source. The target sheet will be cleared.', 'Info', 8);
            clearTargetSheetData(settings);
            ss.toast('Target sheet has been cleared.', 'Complete', 5);
            return;
        }

        if (allTasks.length === 0) {
            const alertBody = T.filterMismatchBody.replace('{FILTER_HEADER}', 'your conditions');
            ui.alert(T.filterMismatchTitle, alertBody, ui.ButtonSet.OK);
            clearTargetSheetData(settings);
            ss.toast('Target sheet has been cleared.', 'Complete', 5);
            return;
        }

        ss.toast('Clearing target sheet for synchronization...', 'Processing', 5);
        clearTargetSheetData(settings);

        const valuesForBulkWrite = allTasks.map(task => task.valuesToWrite);

        if (valuesForBulkWrite.length > 0) {
            ss.toast(`Writing ${allTasks.length} records...`, 'Processing', 10);
            const rangeToWrite = targetSheet.getRange(settings.targetStartRow, 1, valuesForBulkWrite.length, valuesForBulkWrite[0].length);
            rangeToWrite.setValues(valuesForBulkWrite);

            for (let i = 0; i < allTasks.length; i++) {
                if (scriptProperties.getProperty('stopImportRequested') === 'true') {
                    scriptProperties.deleteProperty('stopImportRequested');
                    Logger.log('Import script was manually stopped by the user.');
                    ss.toast('Import process was manually stopped. Data may be incomplete.', 'Stopped', 8);
                    return;
                }

                const task = allTasks[i];
                const currentRow = settings.targetStartRow + i;

                //Logic to create internal or external links
               const isInternalLink = (targetSsId === sourceInfo.id);

                task.richTextChecks.forEach(check => {
                 const cell = targetSheet.getRange(currentRow, check.targetCol);
                 const sourceRow = sourceInfo.startRow + task.sourceRowIndex;
                 const sourceColLetter = columnToLetter(check.originalCol);
                 const linkFragment = `#gid=${sourceInfo.gid}&range=${sourceColLetter}${sourceRow}`;
                 const linkUrl = isInternalLink ? linkFragment : `${sourceInfo.url.replace('/edit', '')}${linkFragment}`;
                 const newText = `${sourceColLetter}${sourceRow}${T.noSourceDataSuffix}`;
                 const richText = SpreadsheetApp.newRichTextValue()
                     .setText(newText)
                     .setLinkUrl(0, newText.length, linkUrl)
                     .build();
                 cell.setRichTextValue(richText);
                });
            }

            const commitColumnValues = Array(allTasks.length).fill(['OK']);
            const commitColIndex = findColumnIndexByHeader(targetSheet.getRange(settings.targetHeaderRow, 1, 1, targetSheet.getMaxColumns()).getValues()[0], 'Commit');
            if (commitColIndex !== -1) {
                targetSheet.getRange(settings.targetStartRow, commitColIndex, commitColumnValues.length, 1).setValues(commitColumnValues);
                targetSheet.hideColumns(commitColIndex);
            } else {
                Logger.log("Warning: 'Commit' header not found in target sheet. Cannot write commit status.");
            }
        }

        ss.toast('Data synchronization complete!', 'Success', 5);

    } catch (e) {
        Logger.log(`Data synchronization failed: ${e.stack}`);
        ui.alert('Data Synchronization Failed', e.message, ui.ButtonSet.OK);
    } finally {
        scriptProperties.deleteProperty('stopImportRequested');
    }
}

// =================================================================================================
// ===================================== SECTION 3: HELPER FUNCTIONS ===============================
// =================================================================================================

function clearTargetSheetData(settings) {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const targetSheet = ss.getSheetByName(settings.targetSheetName);
    if (!targetSheet) throw new Error(`Target sheet named "${settings.targetSheetName}" not found.`);
    const commitColIndex = findColumnIndexByHeader(targetSheet.getRange(settings.targetHeaderRow, 1, 1, targetSheet.getMaxColumns()).getValues()[0], 'Commit');
    if (commitColIndex !== -1) {
        targetSheet.showColumns(commitColIndex);
    }
    const lastRow = targetSheet.getLastRow();
    if (lastRow >= settings.targetStartRow) {
        targetSheet.getRange(settings.targetStartRow, 1, lastRow - settings.targetStartRow + 1, targetSheet.getMaxColumns()).clear();
    }
}

/**
 * Applies all configured keyword filters to a single row of data.
 */
function applyAllFilters(rowData, sourceHeaders, filters) {
    if (!filters || filters.length === 0) return true;
    return filters.every(filter => {
        if (!filter.header) return true;
        const colIndex = sourceHeaders.findIndex(h => h === filter.header);
        if (colIndex === -1) {
            Logger.log(`Warning: Filter header "${filter.header}" not found in imported data. Ignoring this filter condition.`);
            return true;
        }
        const keywords = (filter.keywords || '').split(/,|Ôºå/g).map(kw => kw.trim()).filter(kw => kw);
        if (keywords.length === 0) return true;
        const cellValue = rowData[colIndex] ? rowData[colIndex].toString().trim() : '';
        return keywords.includes(cellValue);
    });
}


/**
 * Builds the full list of tasks based on the determined import mode.
 */
function buildFullTaskList(settings, targetSheet, isFlatteningMode) {
    const targetHeaderRow = settings.targetHeaderRow;
    if (targetHeaderRow <= 0) throw new Error(`'Target Header Row' in Settings must be a positive number.`);
    const targetHeaders = targetSheet.getRange(targetHeaderRow, 1, 1, targetSheet.getMaxColumns()).getValues()[0];

    if (isFlatteningMode) {
        const {
            identifierValues,
            sourceIdentifierHeaders,
            originalColumnIndices,
            headerValues,
            matrixValues,
            sourceInfo,
            masterHeaderName
        } = fetchImportData(settings);

        const qtyHeaderName = "Q'ty";
        const allRequiredHeaders = [...sourceIdentifierHeaders, qtyHeaderName, masterHeaderName];
        const headerMap = {};
        allRequiredHeaders.forEach(header => {
            if (!header) return;
            const colIndex = findColumnIndexByHeader(targetHeaders, header);
            if (colIndex === -1) {
                const message = `Required header "${header}" (from source sheet) was not found in the target sheet "${settings.targetSheetName}" on row ${targetHeaderRow}.\n\nPlease ensure all required headers exist: ${allRequiredHeaders.join(', ')}.`;
                throw new Error(message);
            }
            headerMap[header] = colIndex;
        });

        const allTasks = [];
        const hasSourceData = identifierValues.some(row => row.some(cell => cell.toString().trim() !== ''));
        const loopLength = Math.min(identifierValues.length, matrixValues.length);
        if (identifierValues.length !== matrixValues.length) {
            Logger.log(`Warning: Identifier range has ${identifierValues.length} rows, but matrix range has ${matrixValues.length} rows. Processing the first ${loopLength} common rows.`);
        }

        for (let i = 0; i < loopLength; i++) {
            if (identifierValues[i].every(cell => cell.toString().trim() === '')) {
                continue;
            }

            const nTimes = matrixValues[i];
            if (applyAllFilters(identifierValues[i], sourceIdentifierHeaders, settings.keywordFilters)) {
                const nKeys = getNonEmptyIndices(nTimes);
                if (nKeys.length === 0) {
                    let valuesToWrite = new Array(targetHeaders.length).fill("");
                    sourceIdentifierHeaders.forEach((header, colIndex) => {
                        if (headerMap[header]) {
                            valuesToWrite[headerMap[header] - 1] = identifierValues[i][colIndex];
                        }
                    });
                    valuesToWrite[headerMap[qtyHeaderName] - 1] = 'No source data';
                    valuesToWrite[headerMap[masterHeaderName] - 1] = '';

                    const richTextChecks = [];
                    sourceIdentifierHeaders.forEach((headerToValidate, sourceColIndex) => {
                        const dataIsMissing = !identifierValues[i][sourceColIndex] || identifierValues[i][sourceColIndex].toString().trim() === '';
                        if (dataIsMissing && headerMap[headerToValidate]) {
                            const originalColIndex = originalColumnIndices[sourceColIndex];
                            richTextChecks.push({
                                originalCol: originalColIndex + 1,
                                targetCol: headerMap[headerToValidate]
                            });
                        }
                    });

                    allTasks.push({
                        valuesToWrite: valuesToWrite,
                        richTextChecks: richTextChecks,
                        sourceRowIndex: i
                    });
                } else {
                    for (let z = 0; z < nKeys.length; z++) {
                        const keyIndex = nKeys[z];
                        let qtyValue = nTimes[keyIndex];
                        let configValue = headerValues[0][keyIndex];
                        let valuesToWrite = new Array(targetHeaders.length).fill("");

                        sourceIdentifierHeaders.forEach((header, colIndex) => {
                            if (headerMap[header]) {
                                valuesToWrite[headerMap[header] - 1] = identifierValues[i][colIndex];
                            }
                        });

                        valuesToWrite[headerMap[qtyHeaderName] - 1] = qtyValue;
                        valuesToWrite[headerMap[masterHeaderName] - 1] = configValue;

                        const richTextChecks = [];
                        sourceIdentifierHeaders.forEach((headerToValidate, sourceColIndex) => {
                            const dataIsMissing = !identifierValues[i][sourceColIndex] || identifierValues[i][sourceColIndex].toString().trim() === '';
                            if (dataIsMissing && headerMap[headerToValidate]) {
                                const originalColIndex = originalColumnIndices[sourceColIndex];
                                richTextChecks.push({
                                    originalCol: originalColIndex + 1,
                                    targetCol: headerMap[headerToValidate]
                                });
                            }
                        });

                        allTasks.push({
                            valuesToWrite: valuesToWrite,
                            richTextChecks: richTextChecks,
                            sourceRowIndex: i
                        });
                    }
                }
            }
        }
        return {
            allTasks,
            sourceInfo,
            hasSourceData
        };
    } else {
        // --- MODE 2: DIRECT IMPORT ---
        const {
            identifierValues,
            sourceIdentifierHeaders,
            originalColumnIndices,
            sourceInfo
        } = fetchImportData(settings);
        const hasSourceData = identifierValues.some(row => row.some(cell => cell.toString().trim() !== ''));

        const headersToImport = sourceIdentifierHeaders;
        const headerMap = {};
        headersToImport.forEach(header => {
            const colIndex = findColumnIndexByHeader(targetHeaders, header);
            if (colIndex === -1) {
                throw new Error(`Required header "${header}" (from source sheet) was not found in the target sheet "${settings.targetSheetName}" on row ${settings.targetHeaderRow}.`);
            }
            headerMap[header] = colIndex;
        });

        const allTasks = [];
        for (let i = 0; i < identifierValues.length; i++) {
            if (identifierValues[i].every(cell => cell.toString().trim() === '')) {
                continue;
            }

            const sourceRowData = identifierValues[i];

            if (applyAllFilters(sourceRowData, sourceIdentifierHeaders, settings.keywordFilters)) {
                let valuesToWrite = new Array(targetHeaders.length).fill("");

                headersToImport.forEach((header, idx) => {
                    const targetCol = headerMap[header];
                    if (targetCol) {
                        valuesToWrite[targetCol - 1] = sourceRowData[idx];
                    }
                });

                const richTextChecks = [];
                headersToImport.forEach((headerToValidate, sourceColIndex) => {
                    const dataIsMissing = !sourceRowData[sourceColIndex] || sourceRowData[sourceColIndex].toString().trim() === '';
                    if (dataIsMissing && headerMap[headerToValidate]) {
                        const originalColIndex = originalColumnIndices[sourceColIndex];
                        richTextChecks.push({
                            originalCol: originalColIndex + 1,
                            targetCol: headerMap[headerToValidate]
                        });
                    }
                });

                allTasks.push({
                    valuesToWrite: valuesToWrite,
                    richTextChecks: richTextChecks,
                    sourceRowIndex: i
                });
            }
        }
        return {
            allTasks,
            sourceInfo,
            hasSourceData
        };
    }
}

/**
 * Fetches data based on the new hybrid logic and tracks original column indices.
 */
function fetchImportData(settings) {
    const sourceSpreadsheet = SpreadsheetApp.openByUrl(settings.sourceUrl);
    const sourceSheet = sourceSpreadsheet.getSheetByName(settings.sourceSheetName);
    if (!sourceSheet) throw new Error(`Sheet named "${settings.sourceSheetName}" not found in the source file.`);

    const isFlatteningMode = !!(settings.sourceHeaderRange && settings.sourceValueMatrixRange);

    if (!settings.sourceIdentifierRange) {
        throw new Error("Required setting 'Source Data Import Range' is missing. Please check your 'Data Import Settings' in the Settings sheet.");
    }
    if (isFlatteningMode && (!settings.sourceHeaderRange || !settings.sourceValueMatrixRange)) {
        throw new Error("For Data Flattening Mode, 'Header Start Row for Other Blocks' and 'Data Range within Header of Other Blocks' are required.");
    }

    const sourceGid = sourceSheet.getSheetId();
    const sourceUrl = sourceSpreadsheet.getUrl();
    const identifierRange = sourceSheet.getRange(settings.sourceIdentifierRange);
    const identifierStartRow = identifierRange.getRow();
    const identifierStartCol = identifierRange.getColumn();
    const identifierNumRows = identifierRange.getNumRows();

    let headerValues, matrixValues, masterHeaderName;

    if (isFlatteningMode) {
        const configHeaderDefinitionRange = sourceSheet.getRange(settings.sourceHeaderRange);
        const matrixRange = sourceSheet.getRange(settings.sourceValueMatrixRange);
        matrixValues = matrixRange.getValues();
        const configHeaderRow = configHeaderDefinitionRange.getRow();
        const alignedHeaderRange = sourceSheet.getRange(configHeaderRow, matrixRange.getColumn(), 1, matrixRange.getNumColumns());
        headerValues = alignedHeaderRange.getValues();
        const originalHeaderValues = configHeaderDefinitionRange.getValues();
        const headerRowForDetection = originalHeaderValues[0];
        const firstHeaderIndex = headerRowForDetection.findIndex(h => h.toString().trim() !== '');
        if (firstHeaderIndex === -1) throw new Error(`Could not find headers. Please check your "Source Header Range" (${settings.sourceHeaderRange}) setting in "${settings.sourceSheetName}".`);
        const masterHeaderColumn = configHeaderDefinitionRange.getColumn() + firstHeaderIndex;
        const masterHeaderCell = sourceSheet.getRange(configHeaderRow - 1, masterHeaderColumn);
        masterHeaderName = masterHeaderCell.getValue().toString().trim();
    }

    let sourceIdentifierHeaders;
    let identifierValues;
    let originalColumnIndices = [];
    const useFilter = settings.importFilterHeaders && settings.importFilterHeaders.length > 0;

    if (useFilter) {
        sourceIdentifierHeaders = settings.importFilterHeaders;
        const fullHeaderRange = sourceSheet.getRange(identifierStartRow - 1, 1, 1, sourceSheet.getMaxColumns());
        const fullHeaders = fullHeaderRange.getValues()[0].map(h => h.toString().trim());
        const colIndicesToKeep = sourceIdentifierHeaders.map(header => {
            const index = fullHeaders.indexOf(header);
            if (index === -1) throw new Error(`The header "${header}" specified in the 'Source Header Import Filter' was not found in the source sheet.`);
            return index;
        });
        originalColumnIndices = colIndicesToKeep;
        const fullDataRange = sourceSheet.getRange(identifierStartRow, 1, identifierNumRows, sourceSheet.getMaxColumns());
        const fullDataValues = fullDataRange.getValues();
        identifierValues = fullDataValues.map(row => {
            return colIndicesToKeep.map(colIndex => row[colIndex]);
        });
    } else {
        const idRange = sourceSheet.getRange(settings.sourceIdentifierRange);
        identifierValues = idRange.getValues();
        const idHeaderRange = sourceSheet.getRange(idRange.getRow() - 1, idRange.getColumn(), 1, idRange.getNumColumns());
        sourceIdentifierHeaders = idHeaderRange.getValues()[0].map(h => h.toString().trim());
        const numCols = idRange.getNumColumns();
        const startCol = idRange.getColumn();
        for (let i = 0; i < numCols; i++) {
            originalColumnIndices.push(startCol + i - 1);
        }
    }
    return {
        identifierValues,
        sourceIdentifierHeaders,
        originalColumnIndices,
        headerValues,
        matrixValues,
        masterHeaderName,
        sourceInfo: {
            id: sourceSpreadsheet.getId(),
            gid: sourceGid,
            url: sourceUrl,
            startRow: identifierStartRow,
            startCol: identifierStartCol
        }
    };
}

function getNonEmptyIndices(rowArray) {
    if (!rowArray) return [];
    const nonEmptyIndices = [];
    for (let i = 0; i < rowArray.length; i++) {
        if (rowArray[i] !== "" && rowArray[i] !== null && rowArray[i] !== undefined) {
            nonEmptyIndices.push(i);
        }
    }
    return nonEmptyIndices;
}

/**
 * Converts a 1-based column index to a letter.
 * @param {number} column The 1-based column index.
 * @return {string} The column letter.
 */
function columnToLetter(column) {
    let temp, letter = '';
    while (column > 0) {
        temp = (column - 1) % 26;
        letter = String.fromCharCode(temp + 65) + letter;
        column = (column - temp - 1) / 26;
    }
    return letter;
}

/**
 * Converts a column letter to a 1-based column index.
 * @param {string} letter The column letter.
 * @return {number} The 1-based column index.
 */
function letterToColumn(letter) {
    let column = 0,
        length = letter.length;
    for (let i = 0; i < length; i++) {
        column += (letter.charCodeAt(i) - 64) * Math.pow(26, length - i - 1);
    }
    return column;
}


function findColumnIndexByHeader(headerRow, headerName) {
    if (!headerName) return -1;
    const index = headerRow.findIndex(header => header.toString().trim() === headerName.trim());
    return index !== -1 ? index + 1 : -1;
}

/**
 * Reads all settings, combining PropertiesService and the "Settings" sheet for a transition period.
 * @param {string} [sheetName] - The name of the sheet to get settings for. Defaults to the active sheet.
 * @returns {{importSettings: object, verifySettings: object, monitorSettings: object}}
 */
function getSettings(sheetName) {
    const currentSheetName = sheetName || SpreadsheetApp.getActiveSpreadsheet().getActiveSheet().getName();

    const importSettings = getImportSettings(currentSheetName);
    const verifySettings = getVerifySettings(currentSheetName);

    const monitorSettings = {};
    const settingsSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Settings");
    if (settingsSheet) {
        const values = settingsSheet.getDataRange().getValues();
        let currentSection = null;
        for (let i = 0; i < values.length; i++) {
            const row = values[i];
            const key = (row[0] || '').toString().trim();
            const key_lc = key.toLowerCase();

            if (key_lc.includes("data management settings") || key_lc.includes("Ë≥áÊñôÁÆ°ÁêÜË®≠ÂÆö")) {
                currentSection = 'manage';
                continue;
            }
            if (!key || currentSection !== 'manage') {
                continue;
            }

            const value = row[1] ? row[1].toString().trim() : null;
            if (key.includes("Êñá‰ª∂ÂÖßÂÆπËÆäÊõ¥Ëá™ÂãïÈÄöÁü•")) monitorSettings.monitorRange = value;
            else if (key.includes("ÈÄöÁü•Êé•Êî∂ËÄÖ Email")) monitorSettings.monitorRecipientEmail = value;
            else if (key.includes("ÈÄöÁü•Ê®ôÈ°å")) monitorSettings.monitorSubject = value;
            else if (key.includes("ÈÄöÁü•ÂÖßÊñá")) monitorSettings.monitorBody = value;
        }
    }

    // Post-process header filter range
    if (importSettings.rawImportFilterHeaders && importSettings.sourceUrl && importSettings.sourceSheetName) {
        const T = getTranslations();
        if (importSettings.rawImportFilterHeaders.includes(':') || importSettings.rawImportFilterHeaders.includes('Ôºö')) {
            try {
                const rangeString = importSettings.rawImportFilterHeaders.replace(/Ôºö/g, ':');
                const sourceSs = SpreadsheetApp.openByUrl(importSettings.sourceUrl);
                const sourceSh = sourceSs.getSheetByName(importSettings.sourceSheetName);
                importSettings.importFilterHeaders = sourceSh.getRange(rangeString).getValues()[0].map(h => h.toString().trim()).filter(h => h);
            } catch (e) {
                throw new Error(T.errorInvalidHeaderRange.replace('{RANGE}', importSettings.rawImportFilterHeaders));
            }
        } else {
            importSettings.importFilterHeaders = importSettings.rawImportFilterHeaders.split(/,|Ôºå/g).map(h => h.trim()).filter(h => h);
        }
    } else {
        importSettings.importFilterHeaders = [];
    }

    return {
        importSettings,
        verifySettings,
        monitorSettings
    };
}

